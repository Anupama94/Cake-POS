39587a90c2cd7c6f97b346abc84a4377
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactstrap = require("reactstrap");

var _fa = require("react-icons/fa");

require("./OrderDetails.css");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _callApi = require("../../apiCalls/callApi");

var _reactPerfectScrollbar = _interopRequireDefault(require("react-perfect-scrollbar"));

require("react-perfect-scrollbar/dist/css/styles.css");

var _jsxFileName = "/home/anupamaa/Desktop/Training/pos/server/client/src/components/OrderDetails/OrderBill.js";

class OrderBill extends _react.default.Component {
  constructor(props) {
    super(props);

    this.logicToIncrement = id => {
      return new Promise((resolve, reject) => {
        let index = this.getIndexOfSelectedItemFromItems(id);
        let order = Object.assign({}, this.state.selectedOrder[index]);
        order.quantity = order.quantity + 1;
        let selected = Object.assign([], this.state.selectedOrder);
        selected[index] = order;
        let total = this.state.totalPayable + order.product.price;
        this.setState({
          selectedOrder: selected,
          totalPayable: total
        });
        resolve({
          items: selected,
          totalPrice: total
        });
      });
    };

    this.decrementQuantity = (id, e) => {
      this.logicToDecrement(id).then(updatedOrder => {
        this.updateDB(updatedOrder);
      });
    };

    this.updateStateBeforeDelete = index => {
      return new Promise((resolve, reject) => {
        let selected = Object.assign([], this.state.selectedOrder);
        selected.splice(index, 1); //total price is also affected

        let newTotal = this.state.totalPayable - this.state.selectedOrder[index].product.price * this.state.selectedOrder[index].quantity;
        this.setState({
          selectedOrder: selected,
          totalPayable: newTotal
        });
        resolve({
          items: selected,
          totalPrice: newTotal
        });
      });
    };

    this.deleteItem = (id, e) => {
      let index = this.getIndexOfSelectedItemFromItems(id);
      this.updateStateBeforeDelete(index).then(updatedOrder => {
        this.updateDB(updatedOrder);
      });
    };

    this.updateOrderStatus = () => {
      return new Promise((resolve, reject) => {
        this.setState({
          status: "closed"
        });
        resolve({
          status: "closed"
        });
      });
    };

    this.closeOrder = () => {
      this.updateOrderStatus().then(updatedOrder => {
        console.log("UPDATED ORDER", updatedOrder);
        this.updateDB(updatedOrder);
        console.log("one");
      }).then(() => {
        console.log("two");
        this.context.router.history.push("/OrderList");
      });
    };

    this.loadOrderBill = () => {
      return _react.default.createElement(_reactstrap.Table, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 205
        },
        __self: this
      }, _react.default.createElement("thead", {
        style: {
          backgroundColor: "orange"
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 206
        },
        __self: this
      }, _react.default.createElement("tr", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 207
        },
        __self: this
      }, _react.default.createElement("th", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 208
        },
        __self: this
      }, "X"), _react.default.createElement("th", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 209
        },
        __self: this
      }, "Product"), _react.default.createElement("th", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 210
        },
        __self: this
      }, "Quantity"), _react.default.createElement("th", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 211
        },
        __self: this
      }, "Price"))), _react.default.createElement("tbody", {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 215
        },
        __self: this
      }, this.state.selectedOrder.map(item => {
        return _react.default.createElement("tr", {
          key: this.state.selectedOrder.id,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 217
          },
          __self: this
        }, _react.default.createElement("th", {
          scope: "row",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 218
          },
          __self: this
        }, _react.default.createElement(_fa.FaWindowClose, {
          style: {
            color: "red"
          },
          onClick: this.deleteItem.bind(this, item._id),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 218
          },
          __self: this
        })), _react.default.createElement("th", {
          value: item.product.name,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 221
          },
          __self: this
        }, item.product.name), _react.default.createElement("td", {
          value: item.quantity,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 222
          },
          __self: this
        }, item.quantity, _react.default.createElement(_reactstrap.ButtonGroup, {
          className: "btn-space",
          size: "sm",
          __source: {
            fileName: _jsxFileName,
            lineNumber: 223
          },
          __self: this
        }, _react.default.createElement(_reactstrap.Button, {
          outline: true,
          color: "warning",
          onClick: this.incrementQuantity.bind(this, item._id),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 224
          },
          __self: this
        }, _react.default.createElement(_fa.FaChevronUp, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 224
          },
          __self: this
        })), _react.default.createElement(_reactstrap.Button, {
          outline: true,
          onClick: this.decrementQuantity.bind(this, item._id),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 225
          },
          __self: this
        }, _react.default.createElement(_fa.FaChevronDown, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 225
          },
          __self: this
        })))), _react.default.createElement("td", {
          value: item.product.price * item.quantity,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 227
          },
          __self: this
        }, item.product.price * item.quantity));
      })));
    };

    this.state = {
      selectedOrderId: props.orderId,
      selectedOrder: [],
      totalPayable: 0,
      status: ""
    };
    this.updateStateBeforeDelete = this.updateStateBeforeDelete.bind(this);
    this.deleteItem = this.deleteItem.bind(this);
  }

  componentDidMount() {
    this.getOrderItemsAndSetState();
  }

  getOrderItemsAndSetState() {
    (0, _callApi.getOrderItems)(this.state.selectedOrderId).then(result => {
      this.setState({
        selectedOrder: result.data.items,
        totalPayable: result.data.totalPrice,
        status: result.data.status
      });
    });
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.clickCounter !== this.props.clickCounter) {
      console.log("nextProps", nextProps);
      console.log(nextProps.receiveSelectedFoodItem);
      let newItemToBeAdded = {
        quantity: 1,
        product: nextProps.receiveSelectedFoodItem._id
      };
      let index = this.state.selectedOrder.findIndex(order => {
        return order.product._id === newItemToBeAdded.product;
      });
      console.log("INDEXXXX", index);

      if (index !== -1) {
        console.log("exists");
        this.incrementQuantity(this.state.selectedOrder[index]._id);
      } else {
        this.addItemToOrder(newItemToBeAdded).then(updatedItems => {
          this.updateDB(updatedItems).then(res => {
            console.log("YAYYYYY");
            this.getOrderItemsAndSetState();
          });
        });
      }
    }
  }

  addItemToOrder(newItemToBeAdded) {
    return new Promise((resolve, reject) => {
      let caltotalPrice = 0;
      let newItemsArray = this.state.selectedOrder.map(function (item) {
        caltotalPrice = caltotalPrice + item.quantity * item.product.price;
        return {
          product: item.product._id,
          quantity: item.quantity
        };
      });
      newItemsArray.push(newItemToBeAdded);
      resolve({
        items: newItemsArray,
        totalPrice: caltotalPrice
      });
    });
  }

  incrementQuantity(id) {
    this.logicToIncrement(id).then(updatedOrder => {
      this.updateDB(updatedOrder);
    });
  }

  getIndexOfSelectedItemFromItems(id) {
    let index = this.state.selectedOrder.findIndex(order => {
      return order._id === id;
    });
    return index;
  }

  updateDB(updatedOrder) {
    return new Promise((resolve, reject) => {
      (0, _callApi.updateOrder)(this.state.selectedOrderId, updatedOrder).then(res => {
        resolve(res);
      });
    });
  }

  logicToDecrement(id) {
    return new Promise((resolve, reject) => {
      let index = this.getIndexOfSelectedItemFromItems(id);
      let order = Object.assign({}, this.state.selectedOrder[index]);

      if (order.quantity !== 0) {
        order.quantity = order.quantity - 1;
        let total = this.state.totalPayable - order.product.price;
        let selected = Object.assign([], this.state.selectedOrder);
        selected[index] = order;
        this.setState({
          selectedOrder: selected,
          totalPayable: total
        });
        resolve({
          items: selected,
          totalPrice: total
        });
      }
    });
  }

  render() {
    return _react.default.createElement("div", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 239
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Card, {
      outline: true,
      color: "secondary",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 241
      },
      __self: this
    }, _react.default.createElement(_reactstrap.CardHeader, {
      tag: "h3",
      style: {
        backgroundColor: "grey"
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 242
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Row, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 243
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Col, {
      md: "6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 244
      },
      __self: this
    }, "Order Details"), _react.default.createElement(_reactstrap.Col, {
      md: "6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 245
      },
      __self: this
    }, "  ", _react.default.createElement(_reactstrap.Button, {
      className: "float-right",
      outline: true,
      color: "danger",
      style: {
        color: "orange"
      },
      onClick: this.closeOrder.bind(this),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 245
      },
      __self: this
    }, "CLOSE ORDER")))), _react.default.createElement(_reactstrap.CardBody, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 250
      },
      __self: this
    }, _react.default.createElement(_reactstrap.CardText, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 251
      },
      __self: this
    }, _react.default.createElement("div", {
      id: "scrollableContainer",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 252
      },
      __self: this
    }, this.loadOrderBill()))), _react.default.createElement(_reactstrap.CardFooter, {
      style: {
        backgroundColor: "grey"
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 262
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Row, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 263
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Col, {
      md: "6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 264
      },
      __self: this
    }), _react.default.createElement(_reactstrap.Col, {
      md: "6",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 267
      },
      __self: this
    }, _react.default.createElement("h5", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 268
      },
      __self: this
    }, "Total Payable: Rs. ", _react.default.createElement("strong", {
      style: {
        color: "orange"
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 268
      },
      __self: this
    }, this.state.totalPayable)))))));
  }

}

OrderBill.contextTypes = {
  router: _propTypes.default.object
};
var _default = OrderBill;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,