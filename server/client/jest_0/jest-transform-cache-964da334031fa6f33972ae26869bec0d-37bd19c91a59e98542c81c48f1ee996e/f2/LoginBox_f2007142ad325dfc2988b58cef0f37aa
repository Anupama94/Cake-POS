80371cd4fec9e48991ca0dcb16b107fa
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LoginBox = void 0;

var _react = _interopRequireDefault(require("react"));

require("./Login.css");

var _reactstrap = require("reactstrap");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _auth = _interopRequireDefault(require("../../authentication/auth"));

var _callApi = require("../../apiCalls/callApi");

var _jsxFileName = "/home/anupamaa/Desktop/Training/pos/server/client/src/components/Login/LoginBox.js";

class LoginBox extends _react.default.Component {
  constructor(props) {
    super(props);

    this.handleChange = async event => {
      const target = event.target;
      const value = target.value;
      const name = target.name;
      await this.setState({
        [name]: value
      });
    };

    this.state = {
      email: '',
      password: '',
      validate: {
        emailState: '',
        passwordState: ''
      },
      errorAlert: {
        visible: false,
        message: ''
      }
    };
    this.handleChange = this.handleChange.bind(this);
    this.validateEmail = this.validateEmail.bind(this);
    this.validatePassword = this.validatePassword.bind(this);
  }

  submitLogin(e) {
    e.preventDefault();

    if (this.state.validate.emailState !== 'has-success' && this.state.validate.passwordState !== 'has-success') {
      this.setState({
        validate: {
          emailState: 'has-danger',
          passwordState: this.state.validate.passwordState
        }
      });
    } else if (this.state.validate.emailState === 'has-success' && this.state.validate.passwordState !== 'has-success') {
      this.setState({
        validate: {
          emailState: this.state.validate.emailState,
          passwordState: 'has-danger'
        }
      });
    } else if (this.state.validate.emailState !== 'has-success' && this.state.validate.passwordState === 'has-success') {
      this.setState({
        validate: {
          emailState: 'has-danger',
          passwordState: this.state.validate.passwordState
        }
      });
    } else {
      (0, _callApi.userLogin)({
        email: this.state.email,
        password: this.state.password
      }).then(response => {
        _auth.default.login(() => {
          this.context.router.history.push("/OrderList");
        });
      }).catch(err => {
        this.setState({
          email: '',
          password: ''
        });
        this.setState({
          validate: {
            emailState: 'has-danger'
          }
        });
        this.setState({
          errorAlert: {
            visible: true,
            message: err.message
          }
        });
      });
    }
  }

  validateEmail(e) {
    const emailRex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

    if (emailRex.test(e.target.value)) {
      this.setState({
        validate: {
          emailState: 'has-success',
          passwordState: this.state.validate.passwordState
        }
      });
    } else {
      this.setState({
        validate: {
          emailState: 'has-danger',
          passwordState: this.state.validate.passwordState
        }
      });
    }
  }

  validatePassword(e) {
    if (e.target.value) {
      this.setState({
        validate: {
          emailState: this.state.validate.emailState,
          passwordState: 'has-success'
        }
      });
    } else {
      this.setState({
        validate: {
          emailState: this.state.validate.emailState,
          passwordState: 'has-danger'
        }
      });
    }
  }

  render() {
    const _this$state = this.state,
          email = _this$state.email,
          password = _this$state.password;
    return _react.default.createElement("div", {
      className: "inner-container",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 102
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "header",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 103
      },
      __self: this
    }, "Log In"), _react.default.createElement("div", {
      className: "box",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 106
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Form, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 108
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Col, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 109
      },
      __self: this
    }, _react.default.createElement(_reactstrap.FormGroup, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 110
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Label, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 111
      },
      __self: this
    }, "Username"), _react.default.createElement(_reactstrap.Input, {
      type: "email",
      name: "email",
      id: "exampleEmail",
      placeholder: "myemail@email.com",
      value: email,
      valid: this.state.validate.emailState === 'has-success',
      invalid: this.state.validate.emailState === 'has-danger',
      onChange: e => {
        this.validateEmail(e);
        this.handleChange(e);
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 112
      },
      __self: this
    }), _react.default.createElement(_reactstrap.FormFeedback, {
      invalid: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 126
      },
      __self: this
    }, "Uh oh! Looks like there is an issue with your email. Please input a correct email."))), _react.default.createElement(_reactstrap.Col, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 131
      },
      __self: this
    }, _react.default.createElement(_reactstrap.FormGroup, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 132
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Label, {
      for: "examplePassword",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 133
      },
      __self: this
    }, "Password"), _react.default.createElement(_reactstrap.Input, {
      required: true,
      type: "password",
      name: "password",
      id: "examplePassword",
      placeholder: "Password",
      value: password,
      valid: this.state.validate.passwordState === 'has-success',
      invalid: this.state.validate.passwordState === 'has-danger',
      onChange: e => {
        this.validatePassword(e);
        this.handleChange(e);
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 134
      },
      __self: this
    }), _react.default.createElement(_reactstrap.FormFeedback, {
      invalid: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 149
      },
      __self: this
    }, "*Password is required!")))), _react.default.createElement(_reactstrap.Alert, {
      color: "danger",
      isOpen: this.state.errorAlert.visible,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 156
      },
      __self: this
    }, this.state.errorAlert.message), _react.default.createElement("button", {
      type: "button",
      className: "login-btn",
      onClick: this.submitLogin.bind(this),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 160
      },
      __self: this
    }, " Login ")));
  }

}

exports.LoginBox = LoginBox;
LoginBox.contextTypes = {
  router: _propTypes.default.object
};
var _default = LoginBox;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,