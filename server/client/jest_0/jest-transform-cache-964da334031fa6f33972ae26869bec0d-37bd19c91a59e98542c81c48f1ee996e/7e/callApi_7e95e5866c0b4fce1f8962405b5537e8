4e719520139cdac206b4a97c4d360c6d
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMenuItems = exports.getUsersOrders = exports.updateOrder = exports.getOrderItems = exports.userLogin = void 0;

var _config = require("../apiCalls/config");

var _auth = _interopRequireDefault(require("../authentication/auth"));

var _axios = _interopRequireDefault(require("axios"));

const baseUrl = "http://localhost:3001/";
const requestHeader = {
  headers: {
    "Authorization": "Bearer " + _config.apiConfig.authenticationToken
  }
};

const userLogin = credentials => {
  return new Promise((resolve, reject) => {
    postCall("users/login", credentials).then(result => {
      console.log(result);
      _config.apiConfig.authenticationToken = result.data.token;
      _config.apiConfig.userId = result.data.id;
      resolve();
    }).catch(err => {
      reject();
    });
  });
};

exports.userLogin = userLogin;

const getOrderItems = orderId => {
  return new Promise((resolve, reject) => {
    authenticatedGetCall("orders/" + orderId).then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};

exports.getOrderItems = getOrderItems;

const updateOrder = (orderId, updateOps) => {
  return new Promise((resolve, reject) => {
    putCall("orders/" + orderId, updateOps).then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
}; // this needs to be changed


exports.updateOrder = updateOrder;

const getUsersOrders = () => {
  return new Promise((resolve, reject) => {
    console.log(_config.apiConfig.userId);
    authenticatedGetCall("orders/all/" + _config.apiConfig.userId).then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};

exports.getUsersOrders = getUsersOrders;

const getMenuItems = () => {
  return new Promise((resolve, reject) => {
    authenticatedGetCall("items/").then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};
/*
    POST, GET, PUT calls defined
 */


exports.getMenuItems = getMenuItems;

function postCall(url, mydata) {
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url;
    resolve(_axios.default.post(callingUrl, mydata).then(response => {
      return response;
    }));
  });
}

function authenticatedGetCall(url, header) {
  const requestHeader = {
    headers: {
      "Authorization": "Bearer " + _config.apiConfig.authenticationToken
    }
  };
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url;
    resolve(_axios.default.get(callingUrl, requestHeader).then(response => {
      return response;
    }));
  });
}

function putCall(url, updateOps) {
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url;
    resolve(_axios.default.put(callingUrl, updateOps).then(response => {
      return response;
    }));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,