{"version":3,"sources":["callApi.test.js"],"names":["describe","beforeEach","moxios","install","afterEach","uninstall","it","done","email","password","then","response","wait","request","requests","mostRecent","respondWith","status","expect","list","rows","length","equal","cells","innerHTML"],"mappings":";;;;AA6BA;;AACA;;AACA;;AACA;;AAhCA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AASAA,QAAQ,CAAC,wBAAD,EAA2B,YAAY;AAE3CA,EAAAA,QAAQ,CAAC,qBAAD,EAAwB,YAAY;AAE1CC,IAAAA,UAAU,CAAC,YAAY;AACrB;AACAC,sBAAOC,OAAP;AACD,KAHS,CAAV;AAKAC,IAAAA,SAAS,CAAC,YAAY;AACpB;AACAF,sBAAOG,SAAP;AACD,KAHQ,CAAT;AAKAC,IAAAA,EAAE,CAAC,uCAAD,EAA0C,UAAUC,IAAV,EAAgB;AAE1D,8BAAU;AAACC,QAAAA,KAAK,EAAE,cAAR;AAAwBC,QAAAA,QAAQ,EAAE;AAAlC,OAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AACdT,wBAAOU,IAAP,CAAY,YAAY;AACpB,cAAIC,OAAO,GAAGX,gBAAOY,QAAP,CAAgBC,UAAhB,EAAd;;AACAF,UAAAA,OAAO,CAACG,WAAR,CAAoB;AAClBC,YAAAA,MAAM,EAAE;AADU,WAApB,EAEGP,IAFH,CAEQ,YAAY;AAClBQ,YAAAA,MAAM,CAACC,IAAI,CAACC,IAAL,CAAUC,MAAX,EAAmB,CAAnB,CAAN;AACAC,YAAAA,KAAK,CAACH,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaG,KAAb,CAAmB,CAAnB,EAAsBC,SAAvB,EAAkC,MAAlC,CAAL;AACAF,YAAAA,KAAK,CAACH,IAAI,CAACC,IAAL,CAAU,CAAV,EAAaG,KAAb,CAAmB,CAAnB,EAAsBC,SAAvB,EAAkC,OAAlC,CAAL;AACAjB,YAAAA,IAAI;AACL,WAPD;AAQD,SAVH;AAWH,OAbD,EAF0D,CAiB1D;AAGD,KApBC,CAAF;AAqBD,GAjCO,CAAR;AAkCH,CApCO,CAAR","sourcesContent":["// import { userLogin } from '../../apiCalls/callApi';\n// import { error } from '../../apiCalls/errorConstants';\n// import HttpStatus from 'http-status-codes';\n// import mockAxios from 'axios';\n\n// describe(\"LoginBox Component\", () => {\n\n\n//   it(\"calls axios getCall and returns users\", async () => {\n//     mockAxios.post.mockImplementationOnce(() => Promise.resolve({\n        \n//             status: HttpStatus.OK\n        \n//     }));\n\n//     const login = userLogin({email: \"abcd@123.com\", password: \"abc\"})\n//     .then(response => {\n//         expect(mockAxios.post).toHaveBeenCalledTimes(0);\n//         expect(response.status).toBe(HttpStatus.OK);\n//         expect(mockAxios.post).toHaveBeenCalledWith(true);\n//     })\n//     .catch(err => {});\n   \n    \n//   });\n\n// });\n\n\nimport axios from 'axios';\nimport moxios from 'moxios';\nimport sinon from 'sinon';\nimport { userLogin } from '../../apiCalls/callApi';\n\n\ndescribe('mocking axios requests', function () {\n\n    describe('across entire suite', function () {\n  \n      beforeEach(function () {\n        // import and pass your custom axios instance to this method\n        moxios.install()\n      })\n  \n      afterEach(function () {\n        // import and pass your custom axios instance to this method\n        moxios.uninstall()\n      })\n  \n      it('calls axios getCall and returns users', function (done) {\n          \n        userLogin({email: \"abcd@123.com\", password: \"abc\"})\n        .then(response => {\n            moxios.wait(function () {\n                let request = moxios.requests.mostRecent()\n                request.respondWith({\n                  status: 200\n                }).then(function () {     \n                  expect(list.rows.length, 2)\n                  equal(list.rows[0].cells[0].innerHTML, 'Fred')\n                  equal(list.rows[1].cells[0].innerHTML, 'Wilma')\n                  done()\n                })\n              })\n        })\n  \n        // Elsewhere in your code axios.get('/users/search', { params: { q: 'flintstone' } }) is called\n  \n        \n      })\n    })\n})  \n"]}