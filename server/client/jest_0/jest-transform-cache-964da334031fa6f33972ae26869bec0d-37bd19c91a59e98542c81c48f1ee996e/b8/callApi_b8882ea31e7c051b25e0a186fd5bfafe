6d409dce626bcf09e7fd74a65f57dc0d
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMenuItems = exports.getUsersOrders = exports.updateOrder = exports.getOrderItems = exports.userLogin = void 0;

var _config = require("../apiCalls/config");

var _axios = _interopRequireDefault(require("axios"));

var _errorConstants = require("./errorConstants");

var _httpStatusCodes = _interopRequireDefault(require("http-status-codes"));

const baseUrl = "http://localhost:3001/";

const userLogin = credentials => {
  return new Promise((resolve, reject) => {
    postCall("users/login", credentials).then(result => {
      if (result.status === _httpStatusCodes.default.OK) {
        _config.apiConfig.authenticationToken = result.data.token;
        _config.apiConfig.userId = result.data.id;
        resolve();
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.UNAUTHORIZED) {
        reject({
          message: _errorConstants.error.AUTH_FAILED.MESSAGE,
          code: _errorConstants.error.AUTH_FAILED.CODE
        });
      } else if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        reject({
          message: _errorConstants.error.SERVICE_UNAVAILABLE.MESSAGE,
          code: _errorConstants.error.SERVICE_UNAVAILABLE.CODE
        });
      } else {
        reject({
          message: _errorConstants.error.UNRECOGNIZED_ERROR.MESSAGE,
          code: _errorConstants.error.UNRECOGNIZED_ERROR.CODE
        });
      }
    });
  });
};

exports.userLogin = userLogin;

const getOrderItems = orderId => {
  return new Promise((resolve, reject) => {
    authenticatedGetCall("orders/" + orderId).then(result => {
      if (result.status === _httpStatusCodes.default.OK) {
        resolve(result);
      } else if (result.status === _httpStatusCodes.default.NOT_FOUND) {
        resolve(result);
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        reject({
          message: _errorConstants.error.SERVICE_UNAVAILABLE.MESSAGE,
          code: _errorConstants.error.SERVICE_UNAVAILABLE.CODE
        });
      } else {
        reject({
          message: _errorConstants.error.UNRECOGNIZED_ERROR.MESSAGE,
          code: _errorConstants.error.UNRECOGNIZED_ERROR.CODE
        });
      }
    });
  });
};

exports.getOrderItems = getOrderItems;

const updateOrder = (orderId, updateOps) => {
  return new Promise((resolve, reject) => {
    putCall("orders/" + orderId, updateOps).then(result => {
      if (result.status === _httpStatusCodes.default.OK) {
        resolve(result);
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        reject({
          message: _errorConstants.error.SERVICE_UNAVAILABLE.MESSAGE,
          code: _errorConstants.error.SERVICE_UNAVAILABLE.CODE
        });
      } else {
        reject({
          message: _errorConstants.error.UNRECOGNIZED_ERROR.MESSAGE,
          code: _errorConstants.error.UNRECOGNIZED_ERROR.CODE
        });
      }
    });
  });
}; // this needs to be changed


exports.updateOrder = updateOrder;

const getUsersOrders = () => {
  return new Promise((resolve, reject) => {
    console.log(_config.apiConfig.userId);
    authenticatedGetCall("orders/all/" + _config.apiConfig.userId).then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};

exports.getUsersOrders = getUsersOrders;

const getMenuItems = () => {
  return new Promise((resolve, reject) => {
    authenticatedGetCall("items/").then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};
/*
    POST, GET, PUT calls defined
 */


exports.getMenuItems = getMenuItems;

function postCall(url, mydata) {
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url;

    _axios.default.post(callingUrl, mydata).then(response => {
      if (response.status === _httpStatusCodes.default.OK || response.status === _httpStatusCodes.default.CREATED) {
        resolve(response);
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.UNAUTHORIZED) {
        console.log("Unauthorized request initiated from axios post call in callApi.js");
        reject(err);
      } else if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        console.log("Internal Server Error initiated from axios post call in callApi.js");
        reject(err);
      } else {
        console.log(_errorConstants.error.UNEXPECTED_ERROR.MESSAGE + " initiated from  axios post call in callApi.js");
        reject(err);
      }
    });
  });
}

function authenticatedGetCall(url, header) {
  const requestHeader = {
    headers: {
      "Authorization": "Bearer " + _config.apiConfig.authenticationToken
    }
  };
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url;

    _axios.default.get(callingUrl, requestHeader).then(response => {
      if (response.status === _httpStatusCodes.default.OK || response.response.status === _httpStatusCodes.default.NOT_FOUND) {
        resolve(response);
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        console.log("Internal Server Error initiated from axios authenticatedGetCall in callApi.js");
        reject(err);
      } else {
        console.log(_errorConstants.error.UNEXPECTED_ERROR.MESSAGE + " initiated from  axios authenticatedGetCall in callApi.js");
        reject(err);
      }
    });
  });
}

function putCall(url, updateOps) {
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url; // resolve(axios.put(callingUrl, updateOps)
    //     .then(response => {
    //         return response;
    //     }));

    _axios.default.put(callingUrl, updateOps).then(response => {
      if (response.status === _httpStatusCodes.default.OK || response.status === _httpStatusCodes.default.NO_CONTENT || response.status === _httpStatusCodes.default.CREATED) {
        resolve(response);
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        console.log("Internal Server Error initiated from axios putCall in callApi.js");
        reject(err);
      } else {
        console.log(_errorConstants.error.UNEXPECTED_ERROR.MESSAGE + " initiated from axios putCall in callApi.js");
        reject(err);
      }
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,