b8f372abf0b3813e0625ebb371135178
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMenuItems = exports.getUsersOrders = exports.updateOrder = exports.getOrderItems = exports.userLogin = void 0;

var _config = require("../apiCalls/config");

var _errorConstants = require("./errorConstants");

var _httpStatusCodes = _interopRequireDefault(require("http-status-codes"));

var _services = require("./services");

const userLogin = credentials => {
  return new Promise((resolve, reject) => {
    (0, _services.postCall)("users/login", credentials).then(result => {
      if (result.status === _httpStatusCodes.default.OK) {
        _config.apiConfig.authenticationToken = result.data.token;
        _config.apiConfig.userId = result.data.id;
        resolve(result);
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.UNAUTHORIZED) {
        reject({
          message: _errorConstants.error.AUTH_FAILED.MESSAGE,
          code: _errorConstants.error.AUTH_FAILED.CODE
        });
      } else if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        reject({
          message: _errorConstants.error.SERVICE_UNAVAILABLE.MESSAGE,
          code: _errorConstants.error.SERVICE_UNAVAILABLE.CODE
        });
      } else {
        reject({
          message: _errorConstants.error.UNRECOGNIZED_ERROR.MESSAGE,
          code: _errorConstants.error.UNRECOGNIZED_ERROR.CODE
        });
      }
    });
  });
};

exports.userLogin = userLogin;

const getOrderItems = orderId => {
  return new Promise((resolve, reject) => {
    (0, _services.authenticatedGetCall)("orders/" + orderId).then(result => {
      if (result.status === _httpStatusCodes.default.OK) {
        resolve(result);
      } else if (result.status === _httpStatusCodes.default.NOT_FOUND) {
        resolve(result);
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        reject({
          message: _errorConstants.error.SERVICE_UNAVAILABLE.MESSAGE,
          code: _errorConstants.error.SERVICE_UNAVAILABLE.CODE
        });
      } else {
        reject({
          message: _errorConstants.error.UNRECOGNIZED_ERROR.MESSAGE,
          code: _errorConstants.error.UNRECOGNIZED_ERROR.CODE
        });
      }
    });
  });
};

exports.getOrderItems = getOrderItems;

const updateOrder = (orderId, updateOps) => {
  return new Promise((resolve, reject) => {
    (0, _services.putCall)("orders/" + orderId, updateOps).then(result => {
      if (result.status === _httpStatusCodes.default.OK) {
        resolve(result);
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        reject({
          message: _errorConstants.error.SERVICE_UNAVAILABLE.MESSAGE,
          code: _errorConstants.error.SERVICE_UNAVAILABLE.CODE
        });
      } else {
        reject({
          message: _errorConstants.error.UNRECOGNIZED_ERROR.MESSAGE,
          code: _errorConstants.error.UNRECOGNIZED_ERROR.CODE
        });
      }
    });
  });
};

exports.updateOrder = updateOrder;

const getUsersOrders = () => {
  return new Promise((resolve, reject) => {
    console.log(_config.apiConfig.userId);
    (0, _services.authenticatedGetCall)("orders/all/" + _config.apiConfig.userId).then(result => {
      if (result.status === _httpStatusCodes.default.OK) {
        resolve(result);
      } else if (result.status === _httpStatusCodes.default.NOT_FOUND) {
        resolve(result);
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        reject({
          message: _errorConstants.error.SERVICE_UNAVAILABLE.MESSAGE,
          code: _errorConstants.error.SERVICE_UNAVAILABLE.CODE
        });
      } else {
        reject({
          message: _errorConstants.error.UNRECOGNIZED_ERROR.MESSAGE,
          code: _errorConstants.error.UNRECOGNIZED_ERROR.CODE
        });
      }
    });
  });
};

exports.getUsersOrders = getUsersOrders;

const getMenuItems = () => {
  return new Promise((resolve, reject) => {
    (0, _services.authenticatedGetCall)("items/").then(result => {
      if (result.status === _httpStatusCodes.default.OK) {
        resolve(result);
      } else if (result.status === _httpStatusCodes.default.NOT_FOUND) {
        resolve(result);
      }
    }).catch(err => {
      if (err.response.status === _httpStatusCodes.default.INTERNAL_SERVER_ERROR) {
        reject({
          message: _errorConstants.error.SERVICE_UNAVAILABLE.MESSAGE,
          code: _errorConstants.error.SERVICE_UNAVAILABLE.CODE
        });
      } else {
        reject({
          message: _errorConstants.error.UNRECOGNIZED_ERROR.MESSAGE,
          code: _errorConstants.error.UNRECOGNIZED_ERROR.CODE
        });
      }
    });
  });
};

exports.getMenuItems = getMenuItems;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,