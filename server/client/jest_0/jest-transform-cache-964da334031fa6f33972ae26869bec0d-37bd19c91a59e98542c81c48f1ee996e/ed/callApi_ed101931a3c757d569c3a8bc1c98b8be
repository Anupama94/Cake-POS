622981e3de402f1740c91f63854f2b3a
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMenuItems = exports.getUsersOrders = exports.updateOrder = exports.getOrderItems = exports.userLogin = void 0;

var _config = require("../apiCalls/config");

var _axios = _interopRequireDefault(require("axios"));

var _errorConstants = require("./errorConstants");

const baseUrl = "http://localhost:3001/";
const requestHeader = {
  headers: {
    "Authorization": "Bearer " + _config.apiConfig.authenticationToken
  }
};

const userLogin = credentials => {
  return new Promise((resolve, reject) => {
    postCall("users/login", credentials).then(result => {
      if (result.status === 200) {
        _config.apiConfig.authenticationToken = result.data.token;
        _config.apiConfig.userId = result.data.id;
        resolve();
      }
    }).catch(err => {
      if (err.response.status === 401) {
        reject({
          message: _errorConstants.error.AUTH_FAILED.MESSAGE,
          code: _errorConstants.error.AUTH_FAILED.CODE
        });
      } else if (err.response.status === 500) {
        reject({
          message: _errorConstants.error.SERVICE_UNAVAILABLE.MESSAGE,
          code: _errorConstants.error.SERVICE_UNAVAILABLE.CODE
        });
      }
    });
  });
};

exports.userLogin = userLogin;

const getOrderItems = orderId => {
  return new Promise((resolve, reject) => {
    authenticatedGetCall("orders/" + orderId).then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};

exports.getOrderItems = getOrderItems;

const updateOrder = (orderId, updateOps) => {
  return new Promise((resolve, reject) => {
    putCall("orders/" + orderId, updateOps).then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
}; // this needs to be changed


exports.updateOrder = updateOrder;

const getUsersOrders = () => {
  return new Promise((resolve, reject) => {
    console.log(_config.apiConfig.userId);
    authenticatedGetCall("orders/all/" + _config.apiConfig.userId).then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};

exports.getUsersOrders = getUsersOrders;

const getMenuItems = () => {
  return new Promise((resolve, reject) => {
    authenticatedGetCall("items/").then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};
/*
    POST, GET, PUT calls defined
 */


exports.getMenuItems = getMenuItems;

function postCall(url, mydata) {
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url; // resolve(axios.post(callingUrl, mydata)
    //     .then(response => {
    //         return response;
    //     }));

    _axios.default.post(callingUrl, mydata).then(response => {
      if (response.status === 200 || response.status === 201 || response.status === 401) {
        resolve(response);
      } else if (response.status === 500) {
        console.log("error calling api post call");
        reject();
      } else {
        console.log("unexpected error code");
        reject();
      }
    }).catch(err => {
      if (err.response.status === 401) {
        reject(err);
      }
    });
  });
}

function authenticatedGetCall(url, header) {
  const requestHeader = {
    headers: {
      "Authorization": "Bearer " + _config.apiConfig.authenticationToken
    }
  };
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url;
    resolve(_axios.default.get(callingUrl, requestHeader).then(response => {
      return response;
    }));
  });
}

function putCall(url, updateOps) {
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url;
    resolve(_axios.default.put(callingUrl, updateOps).then(response => {
      return response;
    }));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbGxBcGkuanMiXSwibmFtZXMiOlsiYmFzZVVybCIsInJlcXVlc3RIZWFkZXIiLCJoZWFkZXJzIiwiYXBpQ29uZmlnIiwiYXV0aGVudGljYXRpb25Ub2tlbiIsInVzZXJMb2dpbiIsImNyZWRlbnRpYWxzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwb3N0Q2FsbCIsInRoZW4iLCJyZXN1bHQiLCJzdGF0dXMiLCJkYXRhIiwidG9rZW4iLCJ1c2VySWQiLCJpZCIsImNhdGNoIiwiZXJyIiwicmVzcG9uc2UiLCJtZXNzYWdlIiwiZXJyb3IiLCJBVVRIX0ZBSUxFRCIsIk1FU1NBR0UiLCJjb2RlIiwiQ09ERSIsIlNFUlZJQ0VfVU5BVkFJTEFCTEUiLCJnZXRPcmRlckl0ZW1zIiwib3JkZXJJZCIsImF1dGhlbnRpY2F0ZWRHZXRDYWxsIiwidXBkYXRlT3JkZXIiLCJ1cGRhdGVPcHMiLCJwdXRDYWxsIiwiZ2V0VXNlcnNPcmRlcnMiLCJjb25zb2xlIiwibG9nIiwiZ2V0TWVudUl0ZW1zIiwidXJsIiwibXlkYXRhIiwiY2FsbGluZ1VybCIsImF4aW9zIiwicG9zdCIsImhlYWRlciIsImdldCIsInB1dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsT0FBTyxHQUFHLHdCQUFoQjtBQUVBLE1BQU1DLGFBQWEsR0FBRztBQUFFQyxFQUFBQSxPQUFPLEVBQUU7QUFBRSxxQkFBaUIsWUFBWUMsa0JBQVVDO0FBQXpDO0FBQVgsQ0FBdEI7O0FBRU8sTUFBTUMsU0FBUyxHQUFJQyxXQUFELElBQWlCO0FBQ3RDLFNBQU8sSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQ0MsSUFBQUEsUUFBUSxDQUFDLGFBQUQsRUFBZ0JKLFdBQWhCLENBQVIsQ0FDS0ssSUFETCxDQUNVQyxNQUFNLElBQUk7QUFDWixVQUFJQSxNQUFNLENBQUNDLE1BQVAsS0FBa0IsR0FBdEIsRUFBMkI7QUFD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ekM7QUFBWCxHQUF0QjtBQUVBLFNBQU8sSUFBSUcsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQyxRQUFJK0IsVUFBVSxHQUFHeEMsT0FBTyxHQUFHc0MsR0FBM0I7QUFDQTlCLElBQUFBLE9BQU8sQ0FBQ2lDLGVBQU1HLEdBQU4sQ0FBVUosVUFBVixFQUFzQnZDLGFBQXRCLEVBQ0hVLElBREcsQ0FDRVMsUUFBUSxJQUFJO0FBQ2QsYUFBT0EsUUFBUDtBQUNILEtBSEcsQ0FBRCxDQUFQO0FBSUgsR0FOTSxDQUFQO0FBT0g7O0FBR0QsU0FBU2EsT0FBVCxDQUFpQkssR0FBakIsRUFBc0JOLFNBQXRCLEVBQWlDO0FBQzdCLFNBQU8sSUFBSXpCLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDcEMsUUFBSStCLFVBQVUsR0FBR3hDLE9BQU8sR0FBR3NDLEdBQTNCO0FBQ0E5QixJQUFBQSxPQUFPLENBQUNpQyxlQUFNSSxHQUFOLENBQVVMLFVBQVYsRUFBc0JSLFNBQXRCLEVBQ0hyQixJQURHLENBQ0VTLFFBQVEsSUFBSTtBQUNkLGFBQU9BLFFBQVA7QUFDSCxLQUhHLENBQUQsQ0FBUDtBQUlILEdBTk0sQ0FBUDtBQU9IIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBpQ29uZmlnIH0gZnJvbSAnLi4vYXBpQ2FsbHMvY29uZmlnJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBlcnJvciB9IGZyb20gJy4vZXJyb3JDb25zdGFudHMnO1xuXG5jb25zdCBiYXNlVXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDEvXCI7XG5cbmNvbnN0IHJlcXVlc3RIZWFkZXIgPSB7IGhlYWRlcnM6IHsgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgYXBpQ29uZmlnLmF1dGhlbnRpY2F0aW9uVG9rZW4gfSB9XG5cbmV4cG9ydCBjb25zdCB1c2VyTG9naW4gPSAoY3JlZGVudGlhbHMpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBwb3N0Q2FsbChcInVzZXJzL2xvZ2luXCIsIGNyZWRlbnRpYWxzKVxuICAgICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwaUNvbmZpZy5hdXRoZW50aWNhdGlvblRva2VuID0gcmVzdWx0LmRhdGEudG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGFwaUNvbmZpZy51c2VySWQgPSByZXN1bHQuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5BVVRIX0ZBSUxFRC5NRVNTQUdFLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZXJyb3IuQVVUSF9GQUlMRUQuQ09ERVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXJyLnJlc3BvbnNlLnN0YXR1cyA9PT0gNTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5TRVJWSUNFX1VOQVZBSUxBQkxFLk1FU1NBR0UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBlcnJvci5TRVJWSUNFX1VOQVZBSUxBQkxFLkNPREVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldE9yZGVySXRlbXMgPSAob3JkZXJJZCkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgYXV0aGVudGljYXRlZEdldENhbGwoXCJvcmRlcnMvXCIgKyBvcmRlcklkKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcblxuXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHsgcmVqZWN0KCkgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgZXhwb3J0IGNvbnN0IHVwZGF0ZU9yZGVyID0gKG9yZGVySWQsIHVwZGF0ZU9wcykgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgcHV0Q2FsbChcIm9yZGVycy9cIiArIG9yZGVySWQsIHVwZGF0ZU9wcylcbiAgICAgICAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHsgcmVqZWN0KCkgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLy8gdGhpcyBuZWVkcyB0byBiZSBjaGFuZ2VkXG4gICAgZXhwb3J0IGNvbnN0IGdldFVzZXJzT3JkZXJzID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYXBpQ29uZmlnLnVzZXJJZCk7XG4gICAgICAgICAgICBhdXRoZW50aWNhdGVkR2V0Q2FsbChcIm9yZGVycy9hbGwvXCIgKyBhcGlDb25maWcudXNlcklkKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4geyByZWplY3QoKSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBleHBvcnQgY29uc3QgZ2V0TWVudUl0ZW1zID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgYXV0aGVudGljYXRlZEdldENhbGwoXCJpdGVtcy9cIilcbiAgICAgICAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHsgcmVqZWN0KCkgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLypcbiAgICAgICAgUE9TVCwgR0VULCBQVVQgY2FsbHMgZGVmaW5lZFxuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gcG9zdENhbGwodXJsLCBteWRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGxldCBjYWxsaW5nVXJsID0gYmFzZVVybCArIHVybDtcbiAgICAgICAgICAgIC8vIHJlc29sdmUoYXhpb3MucG9zdChjYWxsaW5nVXJsLCBteWRhdGEpXG4gICAgICAgICAgICAvLyAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgLy8gICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICAvLyAgICAgfSkpO1xuICAgICAgICAgICAgYXhpb3MucG9zdChjYWxsaW5nVXJsLCBteWRhdGEpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDEgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA1MDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgY2FsbGluZyBhcGkgcG9zdCBjYWxsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInVuZXhwZWN0ZWQgZXJyb3IgY29kZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyci5yZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhdXRoZW50aWNhdGVkR2V0Q2FsbCh1cmwsIGhlYWRlcikge1xuICAgICAgICBjb25zdCByZXF1ZXN0SGVhZGVyID0geyBoZWFkZXJzOiB7IFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBcIiArIGFwaUNvbmZpZy5hdXRoZW50aWNhdGlvblRva2VuIH0gfTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNhbGxpbmdVcmwgPSBiYXNlVXJsICsgdXJsO1xuICAgICAgICAgICAgcmVzb2x2ZShheGlvcy5nZXQoY2FsbGluZ1VybCwgcmVxdWVzdEhlYWRlcilcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gcHV0Q2FsbCh1cmwsIHVwZGF0ZU9wcykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNhbGxpbmdVcmwgPSBiYXNlVXJsICsgdXJsO1xuICAgICAgICAgICAgcmVzb2x2ZShheGlvcy5wdXQoY2FsbGluZ1VybCwgdXBkYXRlT3BzKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfSJdfQ==