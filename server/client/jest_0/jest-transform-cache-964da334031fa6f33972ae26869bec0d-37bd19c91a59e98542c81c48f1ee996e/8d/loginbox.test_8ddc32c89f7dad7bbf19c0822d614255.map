{"version":3,"sources":["loginbox.test.js"],"names":["describe","wrapper","initialState","email","password","validate","emailState","passwordState","errorAlert","visible","message","beforeEach","it","expect","toMatchSnapshot","logInSpy","jest","spyOn","instance","forceUpdate","not","toHaveBeenCalled","find","simulate","toHaveBeenCalledTimes","state","toBe","setState","unmock","apiCall","require","userLogin","fn","Promise","reject","error","AUTH_FAILED","MESSAGE","code","CODE","catch","err","resolve","status","HttpStatus","OK","then","response"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { shallow } from 'enzyme';\nimport { LoginBox } from '../Login/LoginBox'\nimport { shallowToJson } from 'enzyme-to-json';\nimport { error } from '../apiCalls/errorConstants';\nimport HttpStatus from 'http-status-codes';\n\ndescribe(\"LoginBox Component\", () => {\n\n  let wrapper;\n  let initialState = {\n    email: '',\n    password: '',\n    validate: {\n      emailState: '',\n      passwordState: ''\n    },\n    errorAlert: {\n      visible: false,\n      message: ''\n    }\n  };\n\n  beforeEach(() => {\n    wrapper = shallow(<LoginBox />);\n  }\n  );\n\n  it(\"should render correctly\", () => {\n    expect(shallowToJson(wrapper)).toMatchSnapshot();\n  });\n\n\n  it('when submit button is clicked without username nor password emailState should be set to has-danger', () => {\n    const logInSpy = jest.spyOn(wrapper.instance(), \"submitLogin\");\n\n    wrapper.instance().forceUpdate();\n    expect(logInSpy).not.toHaveBeenCalled();\n    wrapper.find('button.login-btn').simulate('click');\n    expect(logInSpy).toHaveBeenCalledTimes(1);\n    expect(wrapper.state().validate.emailState).toBe(\"has-danger\");\n\n\n  });\n\n  it('when submit button is clicked with username but no password password-state should be set to has-danger', () => {\n    const logInSpy = jest.spyOn(wrapper.instance(), \"submitLogin\");\n    wrapper.setState({ validate: { emailState: 'has-success' } });\n    wrapper.instance().forceUpdate();\n    expect(logInSpy).not.toHaveBeenCalled();\n    wrapper.find('button.login-btn').simulate('click');\n    expect(logInSpy).toHaveBeenCalledTimes(1);\n    expect(wrapper.state().validate.passwordState).toBe(\"has-danger\");\n\n\n  });\n\n\n  it('when submit button is clicked with password but no username email-state should be set to has-danger', () => {\n    const logInSpy = jest.spyOn(wrapper.instance(), \"submitLogin\");\n    wrapper.setState({ validate: { passwordState: 'has-success' } });\n    wrapper.instance().forceUpdate();\n    expect(logInSpy).not.toHaveBeenCalled();\n    wrapper.find('button.login-btn').simulate('click');\n    expect(logInSpy).toHaveBeenCalledTimes(1);\n    expect(wrapper.state().validate.emailState).toBe(\"has-danger\");\n\n\n  });\n\n\n  it('when submit button is clicked with invalid username and password authentication should be failed and alert should be displayed', () => {\n    const logInSpy = jest.spyOn(wrapper.instance(), \"submitLogin\");\n    jest.unmock('../../apiCalls/callApi');\n\n    const apiCall = require('../../apiCalls/callApi');\n    apiCall.userLogin = jest.fn(() => Promise.reject({\n      message: error.AUTH_FAILED.MESSAGE,\n      code: error.AUTH_FAILED.CODE\n    }));\n\n\n    wrapper.setState({ validate: { emailState: 'has-success', passwordState: 'has-success' } });\n    wrapper.instance().forceUpdate();\n    expect(logInSpy).not.toHaveBeenCalled();\n    wrapper.find('button.login-btn').simulate('click');\n    expect(logInSpy).toHaveBeenCalledTimes(1);\n    expect(apiCall.userLogin).toHaveBeenCalledTimes(1);\n    apiCall.userLogin({ email: \"abcd@123.com\", password: \"invalidPassword\" })\n      .catch(err => {\n        expect(err.message).toBe(error.AUTH_FAILED.MESSAGE);\n        expect(err.code).toBe(error.AUTH_FAILED.CODE);\n        expect(wrapper.state().errorAlert.visible).toBe(true);\n        expect(wrapper.state().errorAlert.message).toBe(error.AUTH_FAILED.MESSAGE);\n\n      });\n    //expect(wrapper.state().errorAlert.visible).toBe(true);\n\n  });\n\n\n  it('when submit button is clicked with valid username and password, should be routed to the orderlist', () => {\n    const logInSpy = jest.spyOn(wrapper.instance(), \"submitLogin\");\n    jest.unmock('../../apiCalls/callApi');\n\n    const apiCall = require('../../apiCalls/callApi');\n    apiCall.userLogin = jest.fn(() => Promise.resolve({ status: HttpStatus.OK }));\n\n    wrapper.setState({ validate: { emailState: 'has-success', passwordState: 'has-success' } });\n    wrapper.instance().forceUpdate();\n    expect(logInSpy).not.toHaveBeenCalled();\n    wrapper.find('button.login-btn').simulate('click');\n    expect(logInSpy).toHaveBeenCalledTimes(1);\n    expect(apiCall.userLogin).toHaveBeenCalledTimes(1);\n    apiCall.userLogin({ email: \"abcd@123.com\", password: \"abc\" })\n      .then(response => {\n        expect(response.status).toBe(HttpStatus.OK);\n      });\n  });\n\n\n\n\n});\n"]}