{"version":3,"sources":["services.test.js"],"names":["afterEach","mockAxios","reset","it","catchFn","jest","fn","thenFn","clientMessage","email","password","then","catch","expect","post","toHaveBeenCalledWith","responseObj","status","mockResponse","not","toHaveBeenCalled"],"mappings":";;;;AAAA;;AACA;;AAGAA,SAAS,CAAC,MAAM;AACZ;AACAC,yBAAUC,KAAV;AACH,CAHQ,CAAT;AAKAC,EAAE,CAAC,4EAAD,EAA+E,MAAM;AAEnF,MAAIC,OAAO,GAAGC,IAAI,CAACC,EAAL,EAAd;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACC,EAAL,EADb,CAFmF,CAKnF;;AACA,MAAIE,aAAa,GAAG,yBAApB;AAEA,yBAAS,aAAT,EAAwB;AAACC,IAAAA,KAAK,EAAE,cAAR;AAAwBC,IAAAA,QAAQ,EAAE;AAAlC,GAAxB,EACKC,IADL,CACUJ,MADV,EAEKK,KAFL,CAEWR,OAFX,EARmF,CAYnF;AACA;AACA;AACA;;AACAS,EAAAA,MAAM,CAACZ,uBAAUa,IAAX,CAAN,CAAuBC,oBAAvB,CAA4C,aAA5C,EAA2D;AAACN,IAAAA,KAAK,EAAE,cAAR;AAAwBC,IAAAA,QAAQ,EAAE;AAAlC,GAA3D,EAhBmF,CAkBnF;;AACA,MAAIM,WAAW,GAAG;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAlB;;AACAhB,yBAAUiB,YAAV,CAAuBF,WAAvB,EApBmF,CAsBnF;AACA;;;AACAH,EAAAA,MAAM,CAACN,MAAD,CAAN,CAAeQ,oBAAf,CAAoC,oBAApC,EAxBmF,CA0BnF;;AACAF,EAAAA,MAAM,CAACT,OAAD,CAAN,CAAgBe,GAAhB,CAAoBC,gBAApB;AACH,CA5BC,CAAF","sourcesContent":["import mockAxios from 'jest-mock-axios';\nimport postCall from '../../apiCalls/services';\n\n\nafterEach(() => {\n    // cleaning up the mess left behind the previous test\n    mockAxios.reset();\n});\n\nit('UppercaseProxy should get data from the server and convert it to UPPERCASE', () => {\n \n    let catchFn = jest.fn(),\n        thenFn = jest.fn();\n \n    // using the component, which should make a server response\n    let clientMessage = 'client is saying hello!';\n \n    postCall(\"users/login\", {email: \"abcd@123.com\", password: \"abc\"})\n        .then(thenFn)\n        .catch(catchFn);\n \n    // since `post` method is a spy, we can check if the server request was correct\n    // a) the correct method was used (post)\n    // b) went to the correct web service URL ('/web-service-url/')\n    // c) if the payload was correct ('client is saying hello!')\n    expect(mockAxios.post).toHaveBeenCalledWith(\"users/login\", {email: \"abcd@123.com\", password: \"abc\"});\n \n    // simulating a server response\n    let responseObj = { status: '200 OK!' };\n    mockAxios.mockResponse(responseObj);\n \n    // checking the `then` spy has been called and if the\n    // response from the server was converted to upper case\n    expect(thenFn).toHaveBeenCalledWith('SERVER SAYS HELLO!');\n \n    // catch should not have been called\n    expect(catchFn).not.toHaveBeenCalled();\n});"]}