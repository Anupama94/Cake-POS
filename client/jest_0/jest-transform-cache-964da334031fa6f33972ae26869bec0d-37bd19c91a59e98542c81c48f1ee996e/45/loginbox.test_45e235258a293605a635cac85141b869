74319452b4bc152be21862916d151c04
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _enzyme = require("enzyme");

var _LoginBox = require("../Login/LoginBox");

var _enzymeToJson = require("enzyme-to-json");

var _errorConstants = require("../../apiCalls/errorConstants");

var _httpStatusCodes = _interopRequireDefault(require("http-status-codes"));

var _jsxFileName = "/home/anupamaa/Desktop/Training/pos/server/client/src/tests/loginbox.test.js";
describe("LoginBox Component", () => {
  let wrapper;
  let initialState = {
    email: '',
    password: '',
    validate: {
      emailState: '',
      passwordState: ''
    },
    errorAlert: {
      visible: false,
      message: ''
    }
  };
  beforeEach(() => {
    wrapper = (0, _enzyme.shallow)(_react.default.createElement(_LoginBox.LoginBox, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 26
      },
      __self: void 0
    }));
  });
  it("should render correctly", () => {
    expect((0, _enzymeToJson.shallowToJson)(wrapper)).toMatchSnapshot();
  });
  it('when submit button is clicked without username nor password emailState should be set to has-danger', () => {
    const logInSpy = jest.spyOn(wrapper.instance(), "submitLogin");
    wrapper.instance().forceUpdate();
    expect(logInSpy).not.toHaveBeenCalled();
    wrapper.find('button.login-btn').simulate('click');
    expect(logInSpy).toHaveBeenCalledTimes(1);
    expect(wrapper.state().validate.emailState).toBe("has-danger");
  });
  it('when submit button is clicked with username but no password password-state should be set to has-danger', () => {
    const logInSpy = jest.spyOn(wrapper.instance(), "submitLogin");
    wrapper.setState({
      validate: {
        emailState: 'has-success'
      }
    });
    wrapper.instance().forceUpdate();
    expect(logInSpy).not.toHaveBeenCalled();
    wrapper.find('button.login-btn').simulate('click');
    expect(logInSpy).toHaveBeenCalledTimes(1);
    expect(wrapper.state().validate.passwordState).toBe("has-danger");
  });
  it('when submit button is clicked with password but no username email-state should be set to has-danger', () => {
    const logInSpy = jest.spyOn(wrapper.instance(), "submitLogin");
    wrapper.setState({
      validate: {
        passwordState: 'has-success'
      }
    });
    wrapper.instance().forceUpdate();
    expect(logInSpy).not.toHaveBeenCalled();
    wrapper.find('button.login-btn').simulate('click');
    expect(logInSpy).toHaveBeenCalledTimes(1);
    expect(wrapper.state().validate.emailState).toBe("has-danger");
  });
  it('when submit button is clicked with invalid username and password authentication should be failed and alert should be displayed', () => {
    jest.unmock('../../apiCalls/callApi');
    const logInSpy = jest.spyOn(wrapper.instance(), "submitLogin");

    const apiCall = require('../../apiCalls/callApi');

    apiCall.userLogin = jest.fn(() => Promise.reject({
      message: _errorConstants.error.AUTH_FAILED.MESSAGE,
      code: _errorConstants.error.AUTH_FAILED.CODE
    }));
    wrapper.setState({
      validate: {
        emailState: 'has-success',
        passwordState: 'has-success'
      }
    });
    wrapper.instance().forceUpdate();
    expect(logInSpy).not.toHaveBeenCalled();
    wrapper.find('button.login-btn').simulate('click');
    expect(logInSpy).toHaveBeenCalledTimes(1);
    expect(apiCall.userLogin).toHaveBeenCalledTimes(1);
    apiCall.userLogin({
      email: "abcd@123.com",
      password: "invalidPassword"
    }).catch(err => {
      expect(err.message).toBe(_errorConstants.error.AUTH_FAILED.MESSAGE);
      expect(err.code).toBe(_errorConstants.error.AUTH_FAILED.CODE);
      expect(wrapper.state().errorAlert.visible).toBe(true);
      expect(wrapper.state().errorAlert.message).toBe(_errorConstants.error.AUTH_FAILED.MESSAGE);
    }); //expect(wrapper.state().errorAlert.visible).toBe(true);
  });
  it('when submit button is clicked with valid username and password, should be routed to the orderlist', () => {
    jest.unmock('../../apiCalls/callApi');
    const logInSpy = jest.spyOn(wrapper.instance(), "submitLogin");

    const apiCall = require('../../apiCalls/callApi');

    apiCall.userLogin = jest.fn(() => Promise.resolve({
      status: _httpStatusCodes.default.OK
    }));
    wrapper.setState({
      validate: {
        emailState: 'has-success',
        passwordState: 'has-success'
      }
    });
    wrapper.instance().forceUpdate();
    expect(logInSpy).not.toHaveBeenCalled();
    wrapper.find('button.login-btn').simulate('click');
    expect(logInSpy).toHaveBeenCalledTimes(1);
    expect(apiCall.userLogin).toHaveBeenCalledTimes(1);
    apiCall.userLogin({
      email: "abcd@123.com",
      password: "abc"
    }).then(response => {
      expect(response.status).toBe(_httpStatusCodes.default.OK);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,