4e0ab0f24f3893999937f23251e8f4f8
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMenuItems = exports.getUsersOrders = exports.updateOrder = exports.getOrderItems = exports.userLogin = void 0;

var _config = require("../apiCalls/config");

var _axios = _interopRequireDefault(require("axios"));

var _errorConstants = require("./errorConstants");

const baseUrl = "http://localhost:3001/";
const requestHeader = {
  headers: {
    "Authorization": "Bearer " + _config.apiConfig.authenticationToken
  }
};

const userLogin = credentials => {
  return new Promise((resolve, reject) => {
    postCall("users/login", credentials).then(result => {
      if (result.status === 200) {
        console.log(result);
        _config.apiConfig.authenticationToken = result.data.token;
        _config.apiConfig.userId = result.data.id;
        resolve();
      }
    }).catch(err => {
      console.log("rejected");

      if (err.response.status === 401) {
        reject({
          message: _errorConstants.error.AUTH_FAILED.MESSAGE,
          code: _errorConstants.error.AUTH_FAILED.CODE
        });
      } else if (err.response.status === 500) {
        reject({
          message: _errorConstants.error.AUTH_FAILED.MESSAGE,
          code: _errorConstants.error.AUTH_FAILED.CODE
        });
      }
    });
  });
};

exports.userLogin = userLogin;

const getOrderItems = orderId => {
  return new Promise((resolve, reject) => {
    authenticatedGetCall("orders/" + orderId).then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};

exports.getOrderItems = getOrderItems;

const updateOrder = (orderId, updateOps) => {
  return new Promise((resolve, reject) => {
    putCall("orders/" + orderId, updateOps).then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
}; // this needs to be changed


exports.updateOrder = updateOrder;

const getUsersOrders = () => {
  return new Promise((resolve, reject) => {
    console.log(_config.apiConfig.userId);
    authenticatedGetCall("orders/all/" + _config.apiConfig.userId).then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};

exports.getUsersOrders = getUsersOrders;

const getMenuItems = () => {
  return new Promise((resolve, reject) => {
    authenticatedGetCall("items/").then(result => {
      resolve(result);
    }).catch(err => {
      reject();
    });
  });
};
/*
    POST, GET, PUT calls defined
 */


exports.getMenuItems = getMenuItems;

function postCall(url, mydata) {
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url; // resolve(axios.post(callingUrl, mydata)
    //     .then(response => {
    //         return response;
    //     }));

    _axios.default.post(callingUrl, mydata).then(response => {
      if (response.status === 200 || response.status === 201 || response.status === 401) {
        resolve(response);
      } else if (response.status === 500) {
        console.log("error calling api post call");
        reject();
      } else {
        console.log("unexpected error code");
        reject();
      }
    }).catch(err => {
      if (err.response.status === 401) {
        reject(err);
      }
    });
  });
}

function authenticatedGetCall(url, header) {
  const requestHeader = {
    headers: {
      "Authorization": "Bearer " + _config.apiConfig.authenticationToken
    }
  };
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url;
    resolve(_axios.default.get(callingUrl, requestHeader).then(response => {
      return response;
    }));
  });
}

function putCall(url, updateOps) {
  return new Promise((resolve, reject) => {
    let callingUrl = baseUrl + url;
    resolve(_axios.default.put(callingUrl, updateOps).then(response => {
      return response;
    }));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbGxBcGkuanMiXSwibmFtZXMiOlsiYmFzZVVybCIsInJlcXVlc3RIZWFkZXIiLCJoZWFkZXJzIiwiYXBpQ29uZmlnIiwiYXV0aGVudGljYXRpb25Ub2tlbiIsInVzZXJMb2dpbiIsImNyZWRlbnRpYWxzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwb3N0Q2FsbCIsInRoZW4iLCJyZXN1bHQiLCJzdGF0dXMiLCJjb25zb2xlIiwibG9nIiwiZGF0YSIsInRva2VuIiwidXNlcklkIiwiaWQiLCJjYXRjaCIsImVyciIsInJlc3BvbnNlIiwibWVzc2FnZSIsImVycm9yIiwiQVVUSF9GQUlMRUQiLCJNRVNTQUdFIiwiY29kZSIsIkNPREUiLCJnZXRPcmRlckl0ZW1zIiwib3JkZXJJZCIsImF1dGhlbnRpY2F0ZWRHZXRDYWxsIiwidXBkYXRlT3JkZXIiLCJ1cGRhdGVPcHMiLCJwdXRDYWxsIiwiZ2V0VXNlcnNPcmRlcnMiLCJnZXRNZW51SXRlbXMiLCJ1cmwiLCJteWRhdGEiLCJjYWxsaW5nVXJsIiwiYXhpb3MiLCJwb3N0IiwiaGVhZGVyIiwiZ2V0IiwicHV0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxPQUFPLEdBQUcsd0JBQWhCO0FBRUEsTUFBTUMsYUFBYSxHQUFHO0FBQUVDLEVBQUFBLE9BQU8sRUFBRTtBQUFFLHFCQUFpQixZQUFZQyxrQkFBVUM7QUFBekM7QUFBWCxDQUF0Qjs7QUFFTyxNQUFNQyxTQUFTLEdBQUlDLFdBQUQsSUFBaUI7QUFDdEMsU0FBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3BDQyxJQUFBQSxRQUFRLENBQUMsYUFBRCxFQUFnQkosV0FBaEIsQ0FBUixDQUNLSyxJQURMLENBQ1VDLE1BQU0sSUFBSTtBQUNaLFVBQUlBLE1BQU0sQ0FBQ0MsTUFBUCxLQUFrQixHQUF0QixFQUEwQjtBQUN0QkMsUUFBQUEsT0FBTyxDQUFDQyxH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QUVDLElBQUFBLE9BQU8sRUFBRTtBQUFFLHVCQUFpQixZQUFZQyxrQkFBVUM7QUFBekM7QUFBWCxHQUF0QjtBQUVBLFNBQU8sSUFBSUcsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQyxRQUFJOEIsVUFBVSxHQUFHdkMsT0FBTyxHQUFHcUMsR0FBM0I7QUFDQTdCLElBQUFBLE9BQU8sQ0FBQ2dDLGVBQU1HLEdBQU4sQ0FBVUosVUFBVixFQUFzQnRDLGFBQXRCLEVBQ0hVLElBREcsQ0FDRVcsUUFBUSxJQUFJO0FBQ2QsYUFBT0EsUUFBUDtBQUNILEtBSEcsQ0FBRCxDQUFQO0FBSUgsR0FOTSxDQUFQO0FBT0g7O0FBR0QsU0FBU1ksT0FBVCxDQUFpQkcsR0FBakIsRUFBc0JKLFNBQXRCLEVBQWlDO0FBQzdCLFNBQU8sSUFBSTFCLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDcEMsUUFBSThCLFVBQVUsR0FBR3ZDLE9BQU8sR0FBR3FDLEdBQTNCO0FBQ0E3QixJQUFBQSxPQUFPLENBQUNnQyxlQUFNSSxHQUFOLENBQVVMLFVBQVYsRUFBcUJOLFNBQXJCLEVBQ0h0QixJQURHLENBQ0VXLFFBQVEsSUFBSTtBQUNkLGFBQU9BLFFBQVA7QUFDSCxLQUhHLENBQUQsQ0FBUDtBQUlILEdBTk0sQ0FBUDtBQU9IIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBpQ29uZmlnIH0gZnJvbSAnLi4vYXBpQ2FsbHMvY29uZmlnJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBlcnJvciB9IGZyb20gJy4vZXJyb3JDb25zdGFudHMnO1xuXG5jb25zdCBiYXNlVXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDEvXCI7XG5cbmNvbnN0IHJlcXVlc3RIZWFkZXIgPSB7IGhlYWRlcnM6IHsgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIFwiICsgYXBpQ29uZmlnLmF1dGhlbnRpY2F0aW9uVG9rZW4gfSB9XG5cbmV4cG9ydCBjb25zdCB1c2VyTG9naW4gPSAoY3JlZGVudGlhbHMpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBwb3N0Q2FsbChcInVzZXJzL2xvZ2luXCIsIGNyZWRlbnRpYWxzKVxuICAgICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gMjAwKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgYXBpQ29uZmlnLmF1dGhlbnRpY2F0aW9uVG9rZW4gPSByZXN1bHQuZGF0YS50b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgYXBpQ29uZmlnLnVzZXJJZCA9IHJlc3VsdC5kYXRhLmlkO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlamVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIGlmIChlcnIucmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpe1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IuQVVUSF9GQUlMRUQuTUVTU0FHRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGVycm9yLkFVVEhfRkFJTEVELkNPREVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVyci5yZXNwb25zZS5zdGF0dXMgPT09IDUwMCl7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5BVVRIX0ZBSUxFRC5NRVNTQUdFLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZXJyb3IuQVVUSF9GQUlMRUQuQ09ERVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldE9yZGVySXRlbXMgPSAob3JkZXJJZCkgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGF1dGhlbnRpY2F0ZWRHZXRDYWxsKFwib3JkZXJzL1wiK29yZGVySWQpXG4gICAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcblxuXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7cmVqZWN0KCl9KTtcbiAgICB9KTtcbn1cblxuXG5leHBvcnQgY29uc3QgdXBkYXRlT3JkZXIgPSAob3JkZXJJZCwgdXBkYXRlT3BzKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgcHV0Q2FsbChcIm9yZGVycy9cIiArIG9yZGVySWQsIHVwZGF0ZU9wcylcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge3JlamVjdCgpfSk7XG4gICAgfSk7XG59XG5cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBjaGFuZ2VkXG5leHBvcnQgY29uc3QgZ2V0VXNlcnNPcmRlcnMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYXBpQ29uZmlnLnVzZXJJZCk7XG4gICAgICAgIGF1dGhlbnRpY2F0ZWRHZXRDYWxsKFwib3JkZXJzL2FsbC9cIiArIGFwaUNvbmZpZy51c2VySWQpXG4gICAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtyZWplY3QoKX0pO1xuICAgIH0pO1xufVxuXG5cbmV4cG9ydCBjb25zdCBnZXRNZW51SXRlbXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgYXV0aGVudGljYXRlZEdldENhbGwoXCJpdGVtcy9cIilcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge3JlamVjdCgpfSk7XG4gICAgfSk7XG59XG5cblxuLypcbiAgICBQT1NULCBHRVQsIFBVVCBjYWxscyBkZWZpbmVkXG4gKi9cblxuZnVuY3Rpb24gcG9zdENhbGwodXJsLCBteWRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgY2FsbGluZ1VybCA9IGJhc2VVcmwgKyB1cmw7XG4gICAgICAgIC8vIHJlc29sdmUoYXhpb3MucG9zdChjYWxsaW5nVXJsLCBteWRhdGEpXG4gICAgICAgIC8vICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAvLyAgICAgfSkpO1xuICAgICAgICBheGlvcy5wb3N0KGNhbGxpbmdVcmwsIG15ZGF0YSlcbiAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCB8fCByZXNwb25zZS5zdGF0dXMgPT09IDIwMSB8fCByZXNwb25zZS5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA1MDApe1xuICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciBjYWxsaW5nIGFwaSBwb3N0IGNhbGxcIik7XG4gICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ1bmV4cGVjdGVkIGVycm9yIGNvZGVcIik7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxKXtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5cbmZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWRHZXRDYWxsKHVybCwgaGVhZGVyKSB7XG4gICAgY29uc3QgcmVxdWVzdEhlYWRlciA9IHsgaGVhZGVyczogeyBcIkF1dGhvcml6YXRpb25cIjogXCJCZWFyZXIgXCIgKyBhcGlDb25maWcuYXV0aGVudGljYXRpb25Ub2tlbiB9IH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgY2FsbGluZ1VybCA9IGJhc2VVcmwgKyB1cmw7XG4gICAgICAgIHJlc29sdmUoYXhpb3MuZ2V0KGNhbGxpbmdVcmwsIHJlcXVlc3RIZWFkZXIpXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuXG5cbmZ1bmN0aW9uIHB1dENhbGwodXJsLCB1cGRhdGVPcHMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgY2FsbGluZ1VybCA9IGJhc2VVcmwgKyB1cmw7XG4gICAgICAgIHJlc29sdmUoYXhpb3MucHV0KGNhbGxpbmdVcmwsdXBkYXRlT3BzKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH0pKTtcbiAgICB9KTtcbn0iXX0=