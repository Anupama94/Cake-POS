2c6ee34669c7addc6ce1a7b67ccc31ad
"use strict";

// import { userLogin } from '../../apiCalls/callApi';
// import { error } from '../../apiCalls/errorConstants';
// import HttpStatus from 'http-status-codes';
// import mockAxios from 'axios';
// describe("LoginBox Component", () => {
//   it("calls axios getCall and returns users", async () => {
//     mockAxios.post.mockImplementationOnce(() => Promise.resolve({
//             status: HttpStatus.OK
//     }));
//     const login = userLogin({email: "abcd@123.com", password: "abc"})
//     .then(response => {
//         expect(mockAxios.post).toHaveBeenCalledTimes(0);
//         expect(response.status).toBe(HttpStatus.OK);
//         expect(mockAxios.post).toHaveBeenCalledWith(true);
//     })
//     .catch(err => {});
//   });
// });
jest.mock('axios');

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _axios = _interopRequireDefault(require("axios"));

var _moxios = _interopRequireDefault(require("moxios"));

var _sinon = _interopRequireDefault(require("sinon"));

var _callApi = require("../../apiCalls/callApi");

var _services = require("../../apiCalls/services");

describe('mocking axios requests', function () {
  describe('across entire suite', function () {
    it('calls axios getCall and returns users', () => {
      // jest.mock('../../apiCalls/services', () => ({
      //     postCall: jest.fn(() => Promise.resolve({ status: '200 OK' }))
      //   }));
      const resp = {
        status: "200 OK"
      };
      let mocked = jest.fn(() => _axios.default.post.mockResolvedValue(resp));
      return (0, _callApi.userLogin)({
        email: "abcd@123.com",
        password: "abc"
      }).then(resp => {
        expect(mocked).toHaveBeenCalled();
      }); // Elsewhere in your code axios.get('/users/search', { params: { q: 'flintstone' } }) is called
    });
  });
}); // export default {
//     post: jest.fn((url, data) => Promise.resolve({response: {status: "200 OK"}}))
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbGxBcGkudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImRlc2NyaWJlIiwiaXQiLCJyZXNwIiwic3RhdHVzIiwibW9ja2VkIiwiZm4iLCJheGlvcyIsInBvc3QiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImVtYWlsIiwicGFzc3dvcmQiLCJ0aGVuIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFVQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVjs7OztBQVBBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUlBQyxRQUFRLENBQUMsd0JBQUQsRUFBMkIsWUFBWTtBQUUzQ0EsRUFBQUEsUUFBUSxDQUFDLHFCQUFELEVBQXdCLFlBQVk7QUFFMUNDLElBQUFBLEVBQUUsQ0FBQyx1Q0FBRCxFQUEwQyxNQUFNO0FBQ2hEO0FBQ0E7QUFDQTtBQUVBLFlBQU1DLElBQUksR0FBRztBQUFDQyxRQUFBQSxNQUFNLEVBQUU7QUFBVCxPQUFiO0FBQ0EsVUFBSUMsTUFBTSxHQUFHTixJQUFJLENBQUNPLEVBQUwsQ0FBUSxNQUFNQyxlQUFNQyxJQUFOLENBQVdDLGlCQUFYLENBQTZCTixJQUE3QixDQUFkLENBQWI7QUFFQSxhQUFPLHdCQUFVO0FBQUNPLFFBQUFBLEtBQUssRUFBRSxjQUFSO0FBQXdCQyxRQUFBQSxRQUFRLEVBQUU7QUFBbEMsT0FBVixFQUNOQyxJQURNLENBQ0RULElBQUksSUFBSTtBQUNWVSxRQUFBQSxNQUFNLENBQUNSLE1BQUQsQ0FBTixDQUFlUyxnQkFBZjtBQUNILE9BSE0sQ0FBUCxDQVJnRCxDQWFoRDtBQUdELEtBaEJDLENBQUY7QUFpQkQsR0FuQk8sQ0FBUjtBQW9CSCxDQXRCTyxDQUFSLEMsQ0F5QkE7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgdXNlckxvZ2luIH0gZnJvbSAnLi4vLi4vYXBpQ2FsbHMvY2FsbEFwaSc7XG4vLyBpbXBvcnQgeyBlcnJvciB9IGZyb20gJy4uLy4uL2FwaUNhbGxzL2Vycm9yQ29uc3RhbnRzJztcbi8vIGltcG9ydCBIdHRwU3RhdHVzIGZyb20gJ2h0dHAtc3RhdHVzLWNvZGVzJztcbi8vIGltcG9ydCBtb2NrQXhpb3MgZnJvbSAnYXhpb3MnO1xuXG4vLyBkZXNjcmliZShcIkxvZ2luQm94IENvbXBvbmVudFwiLCAoKSA9PiB7XG5cblxuLy8gICBpdChcImNhbGxzIGF4aW9zIGdldENhbGwgYW5kIHJldHVybnMgdXNlcnNcIiwgYXN5bmMgKCkgPT4ge1xuLy8gICAgIG1vY2tBeGlvcy5wb3N0Lm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgXG4vLyAgICAgICAgICAgICBzdGF0dXM6IEh0dHBTdGF0dXMuT0tcbiAgICAgICAgXG4vLyAgICAgfSkpO1xuXG4vLyAgICAgY29uc3QgbG9naW4gPSB1c2VyTG9naW4oe2VtYWlsOiBcImFiY2RAMTIzLmNvbVwiLCBwYXNzd29yZDogXCJhYmNcIn0pXG4vLyAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuLy8gICAgICAgICBleHBlY3QobW9ja0F4aW9zLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKTtcbi8vICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZShIdHRwU3RhdHVzLk9LKTtcbi8vICAgICAgICAgZXhwZWN0KG1vY2tBeGlvcy5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh0cnVlKTtcbi8vICAgICB9KVxuLy8gICAgIC5jYXRjaChlcnIgPT4ge30pO1xuICAgXG4gICAgXG4vLyAgIH0pO1xuXG4vLyB9KTtcblxuXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IG1veGlvcyBmcm9tICdtb3hpb3MnO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCB7IHVzZXJMb2dpbiB9IGZyb20gJy4uLy4uL2FwaUNhbGxzL2NhbGxBcGknO1xuaW1wb3J0IHsgcG9zdENhbGwgfSBmcm9tICcuLi8uLi9hcGlDYWxscy9zZXJ2aWNlcyc7XG5cblxuamVzdC5tb2NrKCdheGlvcycpO1xuZGVzY3JpYmUoJ21vY2tpbmcgYXhpb3MgcmVxdWVzdHMnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICBkZXNjcmliZSgnYWNyb3NzIGVudGlyZSBzdWl0ZScsIGZ1bmN0aW9uICgpIHtcbiAgXG4gICAgICBpdCgnY2FsbHMgYXhpb3MgZ2V0Q2FsbCBhbmQgcmV0dXJucyB1c2VycycsICgpID0+IHtcbiAgICAgICAgLy8gamVzdC5tb2NrKCcuLi8uLi9hcGlDYWxscy9zZXJ2aWNlcycsICgpID0+ICh7XG4gICAgICAgIC8vICAgICBwb3N0Q2FsbDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBzdGF0dXM6ICcyMDAgT0snIH0pKVxuICAgICAgICAvLyAgIH0pKTtcbiAgICAgICAgICBcbiAgICAgICAgY29uc3QgcmVzcCA9IHtzdGF0dXM6IFwiMjAwIE9LXCJ9O1xuICAgICAgICBsZXQgbW9ja2VkID0gamVzdC5mbigoKSA9PiBheGlvcy5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKHJlc3ApKTtcblxuICAgICAgICByZXR1cm4gdXNlckxvZ2luKHtlbWFpbDogXCJhYmNkQDEyMy5jb21cIiwgcGFzc3dvcmQ6IFwiYWJjXCJ9KVxuICAgICAgICAudGhlbihyZXNwID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChtb2NrZWQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgICAgfSlcbiAgXG4gICAgICAgIC8vIEVsc2V3aGVyZSBpbiB5b3VyIGNvZGUgYXhpb3MuZ2V0KCcvdXNlcnMvc2VhcmNoJywgeyBwYXJhbXM6IHsgcTogJ2ZsaW50c3RvbmUnIH0gfSkgaXMgY2FsbGVkXG4gIFxuICAgICAgICBcbiAgICAgIH0pXG4gICAgfSlcbn0pICBcblxuXG4vLyBleHBvcnQgZGVmYXVsdCB7XG4vLyAgICAgcG9zdDogamVzdC5mbigodXJsLCBkYXRhKSA9PiBQcm9taXNlLnJlc29sdmUoe3Jlc3BvbnNlOiB7c3RhdHVzOiBcIjIwMCBPS1wifX0pKVxuLy8gfVxuIl19