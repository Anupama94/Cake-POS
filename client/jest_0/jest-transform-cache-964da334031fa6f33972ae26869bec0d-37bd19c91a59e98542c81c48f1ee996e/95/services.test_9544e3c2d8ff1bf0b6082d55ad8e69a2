ecb208bd3451be0f25b97625451c14cd
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _jestMockAxios = _interopRequireDefault(require("jest-mock-axios"));

var _services = require("../../apiCalls/services");

afterEach(() => {
  // cleaning up the mess left behind the previous test
  _jestMockAxios.default.reset();
});
it('UppercaseProxy should get data from the server and convert it to UPPERCASE', () => {
  let catchFn = jest.fn(),
      thenFn = jest.fn(() => console.log("GETS HERE")); // using the component, which should make a server response

  (0, _services.postCall)("users/login", {
    email: "abcd@123.com",
    password: "abc"
  }).then(r => thenFn).catch(e => catchFn); // since `post` method is a spy, we can check if the server request was correct
  // a) the correct method was used (post)
  // b) went to the correct web service URL ('/web-service-url/')
  // c) if the payload was correct ('client is saying hello!')

  expect(_jestMockAxios.default.post).toHaveBeenCalledWith("http://localhost:3001/users/login", {
    email: "abcd@123.com",
    password: "abc"
  }); // simulating a server response

  let responseObj = {
    status: '200 OK!'
  };

  _jestMockAxios.default.mockResponse(responseObj); // checking the `then` spy has been called and if the
  // response from the server was converted to upper case


  expect(thenFn).toHaveBeenCalledTimes(1); // catch should not have been called

  expect(catchFn).not.toHaveBeenCalled();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzLnRlc3QuanMiXSwibmFtZXMiOlsiYWZ0ZXJFYWNoIiwibW9ja0F4aW9zIiwicmVzZXQiLCJpdCIsImNhdGNoRm4iLCJqZXN0IiwiZm4iLCJ0aGVuRm4iLCJjb25zb2xlIiwibG9nIiwiZW1haWwiLCJwYXNzd29yZCIsInRoZW4iLCJyIiwiY2F0Y2giLCJlIiwiZXhwZWN0IiwicG9zdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwicmVzcG9uc2VPYmoiLCJzdGF0dXMiLCJtb2NrUmVzcG9uc2UiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBR0FBLFNBQVMsQ0FBQyxNQUFNO0FBQ1o7QUFDQUMseUJBQVVDLEtBQVY7QUFDSCxDQUhRLENBQVQ7QUFLQUMsRUFBRSxDQUFDLDRFQUFELEVBQStFLE1BQU07QUFFbkYsTUFBSUMsT0FBTyxHQUFHQyxJQUFJLENBQUNDLEVBQUwsRUFBZDtBQUFBLE1BQ0lDLE1BQU0sR0FBR0YsSUFBSSxDQUFDQyxFQUFMLENBQVEsTUFBTUUsT0FBTyxDQUFDQyxHQUFSLENBQVksV0FBWixDQUFkLENBRGIsQ0FGbUYsQ0FLbkY7O0FBR0EsMEJBQVMsYUFBVCxFQUF3QjtBQUFDQyxJQUFBQSxLQUFLLEVBQUUsY0FBUjtBQUF3QkMsSUFBQUEsUUFBUSxFQUFFO0FBQWxDLEdBQXhCLEVBQ0tDLElBREwsQ0FDVUMsQ0FBQyxJQUFJTixNQURmLEVBRUtPLEtBRkwsQ0FFV0MsQ0FBQyxJQUFJWCxPQUZoQixFQVJtRixDQVluRjtBQUNBO0FBQ0E7QUFDQTs7QUFDQVksRUFBQUEsTUFBTSxDQUFDZix1QkFBVWdCLElBQVgsQ0FBTixDQUF1QkMsb0JBQXZCLENBQTRDLG1DQUE1QyxFQUFpRjtBQUFDUixJQUFBQSxLQUFLLEVBQUUsY0FBUjtBQUF3QkMsSUFBQUEsUUFBUSxFQUFFO0FBQWxDLEdBQWpGLEVBaEJtRixDQWtCbkY7O0FBQ0EsTUFBSVEsV0FBVyxHQUFHO0FBQUVDLElBQUFBLE1BQU0sRUFBRTtBQUFWLEdBQWxCOztBQUNBbkIseUJBQVVvQixZQUFWLENBQXVCRixXQUF2QixFQXBCbUYsQ0FzQm5GO0FBQ0E7OztBQUNESCxFQUFBQSxNQUFNLENBQUNULE1BQUQsQ0FBTixDQUFlZSxxQkFBZixDQUFxQyxDQUFyQyxFQXhCb0YsQ0EwQm5GOztBQUNBTixFQUFBQSxNQUFNLENBQUNaLE9BQUQsQ0FBTixDQUFnQm1CLEdBQWhCLENBQW9CQyxnQkFBcEI7QUFDSCxDQTVCQyxDQUFGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vY2tBeGlvcyBmcm9tICdqZXN0LW1vY2stYXhpb3MnO1xuaW1wb3J0IHsgcG9zdENhbGwgfSBmcm9tICcuLi8uLi9hcGlDYWxscy9zZXJ2aWNlcyc7XG5cblxuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAvLyBjbGVhbmluZyB1cCB0aGUgbWVzcyBsZWZ0IGJlaGluZCB0aGUgcHJldmlvdXMgdGVzdFxuICAgIG1vY2tBeGlvcy5yZXNldCgpO1xufSk7XG5cbml0KCdVcHBlcmNhc2VQcm94eSBzaG91bGQgZ2V0IGRhdGEgZnJvbSB0aGUgc2VydmVyIGFuZCBjb252ZXJ0IGl0IHRvIFVQUEVSQ0FTRScsICgpID0+IHtcbiBcbiAgICBsZXQgY2F0Y2hGbiA9IGplc3QuZm4oKSxcbiAgICAgICAgdGhlbkZuID0gamVzdC5mbigoKSA9PiBjb25zb2xlLmxvZyhcIkdFVFMgSEVSRVwiKSk7XG4gXG4gICAgLy8gdXNpbmcgdGhlIGNvbXBvbmVudCwgd2hpY2ggc2hvdWxkIG1ha2UgYSBzZXJ2ZXIgcmVzcG9uc2VcbiAgICBcbiBcbiAgICBwb3N0Q2FsbChcInVzZXJzL2xvZ2luXCIsIHtlbWFpbDogXCJhYmNkQDEyMy5jb21cIiwgcGFzc3dvcmQ6IFwiYWJjXCJ9KVxuICAgICAgICAudGhlbihyID0+IHRoZW5GbilcbiAgICAgICAgLmNhdGNoKGUgPT4gY2F0Y2hGbik7XG4gXG4gICAgLy8gc2luY2UgYHBvc3RgIG1ldGhvZCBpcyBhIHNweSwgd2UgY2FuIGNoZWNrIGlmIHRoZSBzZXJ2ZXIgcmVxdWVzdCB3YXMgY29ycmVjdFxuICAgIC8vIGEpIHRoZSBjb3JyZWN0IG1ldGhvZCB3YXMgdXNlZCAocG9zdClcbiAgICAvLyBiKSB3ZW50IHRvIHRoZSBjb3JyZWN0IHdlYiBzZXJ2aWNlIFVSTCAoJy93ZWItc2VydmljZS11cmwvJylcbiAgICAvLyBjKSBpZiB0aGUgcGF5bG9hZCB3YXMgY29ycmVjdCAoJ2NsaWVudCBpcyBzYXlpbmcgaGVsbG8hJylcbiAgICBleHBlY3QobW9ja0F4aW9zLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwiaHR0cDovL2xvY2FsaG9zdDozMDAxL3VzZXJzL2xvZ2luXCIsIHtlbWFpbDogXCJhYmNkQDEyMy5jb21cIiwgcGFzc3dvcmQ6IFwiYWJjXCJ9KTtcbiBcbiAgICAvLyBzaW11bGF0aW5nIGEgc2VydmVyIHJlc3BvbnNlXG4gICAgbGV0IHJlc3BvbnNlT2JqID0geyBzdGF0dXM6ICcyMDAgT0shJyB9O1xuICAgIG1vY2tBeGlvcy5tb2NrUmVzcG9uc2UocmVzcG9uc2VPYmopO1xuIFxuICAgIC8vIGNoZWNraW5nIHRoZSBgdGhlbmAgc3B5IGhhcyBiZWVuIGNhbGxlZCBhbmQgaWYgdGhlXG4gICAgLy8gcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyIHdhcyBjb252ZXJ0ZWQgdG8gdXBwZXIgY2FzZVxuICAgZXhwZWN0KHRoZW5GbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuIFxuICAgIC8vIGNhdGNoIHNob3VsZCBub3QgaGF2ZSBiZWVuIGNhbGxlZFxuICAgIGV4cGVjdChjYXRjaEZuKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xufSk7Il19