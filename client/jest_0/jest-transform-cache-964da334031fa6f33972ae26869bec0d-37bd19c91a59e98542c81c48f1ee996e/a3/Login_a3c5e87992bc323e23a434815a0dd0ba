0527ea27536eb2cbc6237955de04fa13
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

require("./Login.css");

var _reactstrap = require("reactstrap");

var _LoginBox = require("./LoginBox");

var _jsxFileName = "/home/anupamaa/Desktop/Training/pos/server/client/src/components/Login/Login.js";

class LoginOrRegister extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      isLoginOpen: true,
      isRegisterOpen: false
    };
  }

  showLoginBox() {
    this.setState({
      isLoginOpen: true,
      isRegisterOpen: false
    });
  }

  showRegisterBox() {
    this.setState({
      isRegisterOpen: true,
      isLoginOpen: false
    });
  }

  render() {
    return _react.default.createElement("div", {
      className: "root-container",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 27
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "box-controller",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 28
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "controller " + (this.state.isLoginOpen ? "selected-controller" : ""),
      onClick: this.showLoginBox.bind(this),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 29
      },
      __self: this
    }, "Log In"), _react.default.createElement("div", {
      className: "controller " + (this.state.isRegisterOpen ? "selected-controller" : ""),
      onClick: this.showRegisterBox.bind(this),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 33
      },
      __self: this
    }, "Register")), _react.default.createElement("div", {
      className: "box-container",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 38
      },
      __self: this
    }, this.state.isLoginOpen && _react.default.createElement(_LoginBox.LoginBox, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 39
      },
      __self: this
    }), this.state.isRegisterOpen && _react.default.createElement(RegisterBox, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 40
      },
      __self: this
    })));
  }

}

class RegisterBox extends _react.default.Component {
  constructor(props) {
    super(props);

    this.handleChange = async event => {
      const target = event.target;
      const value = target.value;
      const name = target.name;
      await this.setState({
        [name]: value
      });
    };

    this.state = {
      'username': '',
      'email': '',
      'password': '',
      validate: {
        usernameState: '',
        emailState: '',
        passwordState: ''
      }
    };
    this.handleChange = this.handleChange.bind(this);
  }

  validateEmail(e) {
    const emailRex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    const validate = this.state.validate;

    if (emailRex.test(e.target.value)) {
      validate.emailState = 'has-success';
    } else {
      validate.emailState = 'has-danger';
    }

    this.setState({
      validate
    });
  }

  validatePassword(e) {
    const passwordRex = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{4,}$/;
    const validate = this.state.validate;

    if (passwordRex.test(e.target.value)) {
      validate.passwordState = 'has-success';
    } else {
      validate.passwordState = 'has-danger';
    }

    this.setState({
      validate
    });
  }

  validateUsername(e) {
    /* validate against the database */
  }

  submitRegister(e) {
    e.preventDefault();

    if (this.state.validate.emailState === 'has-success') {
      alert();
    }
  }

  render() {
    const _this$state = this.state,
          username = _this$state.username,
          email = _this$state.email,
          password = _this$state.password;
    return _react.default.createElement("div", {
      className: "inner-container",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 118
      },
      __self: this
    }, _react.default.createElement("div", {
      className: "header",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 119
      },
      __self: this
    }, "Register"), _react.default.createElement("div", {
      className: "box",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 122
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Form, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 124
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Col, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 125
      },
      __self: this
    }, _react.default.createElement(_reactstrap.FormGroup, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 126
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Label, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 127
      },
      __self: this
    }, "Username"), _react.default.createElement(_reactstrap.Input, {
      type: "text",
      name: "username",
      id: "username",
      value: email,
      valid: this.state.validate.usernameState === 'has-success',
      invalid: this.state.validate.usernameState === 'has-danger',
      onChange: e => {
        this.validateUsername(e);
        this.handleChange(e);
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 128
      },
      __self: this
    }), _react.default.createElement(_reactstrap.FormFeedback, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 141
      },
      __self: this
    }, "Uh oh! This username is taken!"))), _react.default.createElement(_reactstrap.Col, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 147
      },
      __self: this
    }, _react.default.createElement(_reactstrap.FormGroup, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 148
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Label, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 149
      },
      __self: this
    }, "Email"), _react.default.createElement(_reactstrap.Input, {
      type: "email",
      name: "email",
      id: "exampleEmail",
      placeholder: "myemail@email.com",
      value: email,
      valid: this.state.validate.emailState === 'has-success',
      invalid: this.state.validate.emailState === 'has-danger',
      onChange: e => {
        this.validateEmail(e);
        this.handleChange(e);
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 150
      },
      __self: this
    }), _react.default.createElement(_reactstrap.FormFeedback, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 164
      },
      __self: this
    }, "Uh oh! Looks like there is an issue with your email. Please input a correct email."))), _react.default.createElement(_reactstrap.Col, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 169
      },
      __self: this
    }, _react.default.createElement(_reactstrap.FormGroup, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 170
      },
      __self: this
    }, _react.default.createElement(_reactstrap.Label, {
      for: "examplePassword",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 171
      },
      __self: this
    }, "Password"), _react.default.createElement(_reactstrap.Input, {
      type: "password",
      name: "password",
      id: "examplePassword",
      placeholder: "Password",
      value: password,
      onChange: e => {
        this.validatePassword(e);
        this.handleChange(e);
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 172
      },
      __self: this
    }), _react.default.createElement(_reactstrap.FormFeedback, {
      invalid: true,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 183
      },
      __self: this
    }, "Uh oh! Looks like there is an issue with your email. Please input a correct email."), _react.default.createElement(_reactstrap.FormText, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 186
      },
      __self: this
    }, "Password should contain at least four characters, at least one number and both lower and uppercase letters and special characters.")))), _react.default.createElement("button", {
      type: "button",
      className: "login-btn",
      onClick: this.submitRegister.bind(this),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 191
      },
      __self: this
    }, " Register")));
  }

}

class Login extends _react.default.Component {
  render() {
    return _react.default.createElement(LoginOrRegister, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 207
      },
      __self: this
    });
  }

}

var _default = Login;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,