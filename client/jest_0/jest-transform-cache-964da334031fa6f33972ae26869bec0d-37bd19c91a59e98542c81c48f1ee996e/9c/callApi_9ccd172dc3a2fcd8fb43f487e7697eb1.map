{"version":3,"sources":["callApi.js"],"names":["userLogin","credentials","Promise","resolve","reject","then","result","status","HttpStatus","OK","apiConfig","authenticationToken","data","token","userId","id","catch","err","response","UNAUTHORIZED","message","error","AUTH_FAILED","MESSAGE","code","CODE","INTERNAL_SERVER_ERROR","SERVICE_UNAVAILABLE","UNRECOGNIZED_ERROR","getOrderItems","orderId","NOT_FOUND","updateOrder","updateOps","getUsersOrders","console","log","getMenuItems"],"mappings":"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","sourcesContent":["import { apiConfig } from '../apiCalls/config';\nimport { error } from './errorConstants';\nimport HttpStatus from 'http-status-codes';\nimport { postCall, authenticatedGetCall, putCall } from './services';\n\n\nexport const userLogin = (credentials) => {\n    return new Promise((resolve, reject) => {\n        postCall(\"users/login\", credentials)\n            .then(result => {\n                if (result.status === HttpStatus.OK) {\n                    apiConfig.authenticationToken = result.data.token;\n                    apiConfig.userId = result.data.id;\n                    resolve(result);\n                }\n            })\n            .catch(err => {\n                if (err.response.status === HttpStatus.UNAUTHORIZED) {\n                    reject({\n                        message: error.AUTH_FAILED.MESSAGE,\n                        code: error.AUTH_FAILED.CODE\n                    });\n                }\n                else if (err.response.status === HttpStatus.INTERNAL_SERVER_ERROR) {\n                    reject({\n                        message: error.SERVICE_UNAVAILABLE.MESSAGE,\n                        code: error.SERVICE_UNAVAILABLE.CODE\n                    });\n                }\n                else {\n                    reject({\n                        message: error.UNRECOGNIZED_ERROR.MESSAGE,\n                        code: error.UNRECOGNIZED_ERROR.CODE\n                    });\n                }\n\n            });\n    });\n}\n\n\nexport const getOrderItems = (orderId) => {\n    return new Promise((resolve, reject) => {\n        authenticatedGetCall(\"orders/\" + orderId)\n            .then(result => {\n                if (result.status === HttpStatus.OK) {\n                    resolve(result);\n                }\n                else if (result.status === HttpStatus.NOT_FOUND) {\n                    resolve(result);\n                }\n            })\n            .catch(err => {\n                if (err.response.status === HttpStatus.INTERNAL_SERVER_ERROR) {\n                    reject({\n                        message: error.SERVICE_UNAVAILABLE.MESSAGE,\n                        code: error.SERVICE_UNAVAILABLE.CODE\n                    });\n                }\n                else {\n                    reject({\n                        message: error.UNRECOGNIZED_ERROR.MESSAGE,\n                        code: error.UNRECOGNIZED_ERROR.CODE\n                    });\n                }\n            });\n    });\n}\n\n\nexport const updateOrder = (orderId, updateOps) => {\n    return new Promise((resolve, reject) => {\n        putCall(\"orders/\" + orderId, updateOps)\n            .then(result => {\n                if (result.status === HttpStatus.OK) {\n                    resolve(result);\n                }\n\n            })\n            .catch(err => {\n                if (err.response.status === HttpStatus.INTERNAL_SERVER_ERROR) {\n                    reject({\n                        message: error.SERVICE_UNAVAILABLE.MESSAGE,\n                        code: error.SERVICE_UNAVAILABLE.CODE\n                    });\n                }\n                else {\n                    reject({\n                        message: error.UNRECOGNIZED_ERROR.MESSAGE,\n                        code: error.UNRECOGNIZED_ERROR.CODE\n                    });\n                }\n            });\n    });\n}\n\n\nexport const getUsersOrders = () => {\n    return new Promise((resolve, reject) => {\n        console.log(apiConfig.userId);\n        authenticatedGetCall(\"orders/all/\" + apiConfig.userId)\n            .then(result => {\n                if (result.status === HttpStatus.OK) {\n                    resolve(result);\n                }\n                else if (result.status === HttpStatus.NOT_FOUND) {\n                    resolve(result);\n                }\n            })\n            .catch(err => {\n                if (err.response.status === HttpStatus.INTERNAL_SERVER_ERROR) {\n                    reject({\n                        message: error.SERVICE_UNAVAILABLE.MESSAGE,\n                        code: error.SERVICE_UNAVAILABLE.CODE\n                    });\n                }\n                else {\n                    reject({\n                        message: error.UNRECOGNIZED_ERROR.MESSAGE,\n                        code: error.UNRECOGNIZED_ERROR.CODE\n                    });\n                }\n            });\n    });\n}\n\n\nexport const getMenuItems = () => {\n    return new Promise((resolve, reject) => {\n        authenticatedGetCall(\"items/\")\n            .then(result => {\n                if (result.status === HttpStatus.OK) {\n                    resolve(result);\n                }\n                else if (result.status === HttpStatus.NOT_FOUND) {\n                    resolve(result);\n                }\n\n            })\n            .catch(err => {\n                if (err.response.status === HttpStatus.INTERNAL_SERVER_ERROR) {\n                    reject({\n                        message: error.SERVICE_UNAVAILABLE.MESSAGE,\n                        code: error.SERVICE_UNAVAILABLE.CODE\n                    });\n                }\n                else {\n                    reject({\n                        message: error.UNRECOGNIZED_ERROR.MESSAGE,\n                        code: error.UNRECOGNIZED_ERROR.CODE\n                    });\n                }\n            });\n    });\n}\n\n\n"]}