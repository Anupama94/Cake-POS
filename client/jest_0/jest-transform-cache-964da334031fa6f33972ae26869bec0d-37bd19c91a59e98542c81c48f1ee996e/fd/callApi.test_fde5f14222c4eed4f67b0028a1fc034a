10be0e62e7078f61178cdb8e97271491
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _axios = _interopRequireDefault(require("axios"));

var _moxios = _interopRequireDefault(require("moxios"));

var _sinon = _interopRequireDefault(require("sinon"));

var _callApi = require("../../apiCalls/callApi");

var _services = require("../../apiCalls/services");

// import { userLogin } from '../../apiCalls/callApi';
// import { error } from '../../apiCalls/errorConstants';
// import HttpStatus from 'http-status-codes';
// import mockAxios from 'axios';
// describe("LoginBox Component", () => {
//   it("calls axios getCall and returns users", async () => {
//     mockAxios.post.mockImplementationOnce(() => Promise.resolve({
//             status: HttpStatus.OK
//     }));
//     const login = userLogin({email: "abcd@123.com", password: "abc"})
//     .then(response => {
//         expect(mockAxios.post).toHaveBeenCalledTimes(0);
//         expect(response.status).toBe(HttpStatus.OK);
//         expect(mockAxios.post).toHaveBeenCalledWith(true);
//     })
//     .catch(err => {});
//   });
// });
//jest.mock('../../apiCalls/services');
describe('mocking axios requests', function () {
  describe('across entire suite', function () {
    it('calls axios getCall and returns users', () => {
      jest.unmock('../../apiCalls/services');

      const services = require('../../apiCalls/services');

      services.postCall = _sinon.default.stub();
      services.postCall.withArgs("users/login", {
        email: "abcd@123.com",
        password: "abc"
      }).returns(Promise.resolve({
        status: '200 OK'
      }));
      (0, _callApi.userLogin)({
        email: "abcd@123.com",
        password: "abc"
      }).then(response => {
        expect(services.postCall).toHaveBeenCalledTimes(1);
      }).catch(() => {});
    });
  });
}); // export default {
//     post: jest.fn((url, data) => Promise.resolve({response: {status: "200 OK"}}))
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbGxBcGkudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiamVzdCIsInVubW9jayIsInNlcnZpY2VzIiwicmVxdWlyZSIsInBvc3RDYWxsIiwic2lub24iLCJzdHViIiwid2l0aEFyZ3MiLCJlbWFpbCIsInBhc3N3b3JkIiwicmV0dXJucyIsIlByb21pc2UiLCJyZXNvbHZlIiwic3RhdHVzIiwidGhlbiIsInJlc3BvbnNlIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiY2F0Y2giXSwibWFwcGluZ3MiOiI7Ozs7QUE2QkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBakNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQVVBO0FBQ0FBLFFBQVEsQ0FBQyx3QkFBRCxFQUEyQixZQUFZO0FBRTNDQSxFQUFBQSxRQUFRLENBQUMscUJBQUQsRUFBd0IsWUFBWTtBQUV4Q0MsSUFBQUEsRUFBRSxDQUFDLHVDQUFELEVBQTBDLE1BQU07QUFDOUNDLE1BQUFBLElBQUksQ0FBQ0MsTUFBTCxDQUFZLHlCQUFaOztBQUNBLFlBQU1DLFFBQVEsR0FBR0MsT0FBTyxDQUFDLHlCQUFELENBQXhCOztBQUNBRCxNQUFBQSxRQUFRLENBQUNFLFFBQVQsR0FBb0JDLGVBQU1DLElBQU4sRUFBcEI7QUFDQUosTUFBQUEsUUFBUSxDQUFDRSxRQUFULENBQWtCRyxRQUFsQixDQUEyQixhQUEzQixFQUEwQztBQUFDQyxRQUFBQSxLQUFLLEVBQUUsY0FBUjtBQUF3QkMsUUFBQUEsUUFBUSxFQUFFO0FBQWxDLE9BQTFDLEVBQW9GQyxPQUFwRixDQUE0RkMsT0FBTyxDQUFDQyxPQUFSLENBQWdCO0FBQUNDLFFBQUFBLE1BQU0sRUFBRTtBQUFULE9BQWhCLENBQTVGO0FBRUEsOEJBQVU7QUFBQ0wsUUFBQUEsS0FBSyxFQUFFLGNBQVI7QUFBd0JDLFFBQUFBLFFBQVEsRUFBRTtBQUFsQyxPQUFWLEVBQ0NLLElBREQsQ0FDTUMsUUFBUSxJQUFJO0FBQ2RDLFFBQUFBLE1BQU0sQ0FBQ2QsUUFBUSxDQUFDRSxRQUFWLENBQU4sQ0FBMEJhLHFCQUExQixDQUFnRCxDQUFoRDtBQUNILE9BSEQsRUFJQ0MsS0FKRCxDQUlPLE1BQU0sQ0FBRSxDQUpmO0FBS0MsS0FYSCxDQUFGO0FBY0MsR0FoQkcsQ0FBUjtBQWlCQyxDQW5CRyxDQUFSLEMsQ0F1QkE7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgdXNlckxvZ2luIH0gZnJvbSAnLi4vLi4vYXBpQ2FsbHMvY2FsbEFwaSc7XG4vLyBpbXBvcnQgeyBlcnJvciB9IGZyb20gJy4uLy4uL2FwaUNhbGxzL2Vycm9yQ29uc3RhbnRzJztcbi8vIGltcG9ydCBIdHRwU3RhdHVzIGZyb20gJ2h0dHAtc3RhdHVzLWNvZGVzJztcbi8vIGltcG9ydCBtb2NrQXhpb3MgZnJvbSAnYXhpb3MnO1xuXG4vLyBkZXNjcmliZShcIkxvZ2luQm94IENvbXBvbmVudFwiLCAoKSA9PiB7XG5cblxuLy8gICBpdChcImNhbGxzIGF4aW9zIGdldENhbGwgYW5kIHJldHVybnMgdXNlcnNcIiwgYXN5bmMgKCkgPT4ge1xuLy8gICAgIG1vY2tBeGlvcy5wb3N0Lm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcblxuLy8gICAgICAgICAgICAgc3RhdHVzOiBIdHRwU3RhdHVzLk9LXG5cbi8vICAgICB9KSk7XG5cbi8vICAgICBjb25zdCBsb2dpbiA9IHVzZXJMb2dpbih7ZW1haWw6IFwiYWJjZEAxMjMuY29tXCIsIHBhc3N3b3JkOiBcImFiY1wifSlcbi8vICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4vLyAgICAgICAgIGV4cGVjdChtb2NrQXhpb3MucG9zdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApO1xuLy8gICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKEh0dHBTdGF0dXMuT0spO1xuLy8gICAgICAgICBleHBlY3QobW9ja0F4aW9zLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRydWUpO1xuLy8gICAgIH0pXG4vLyAgICAgLmNhdGNoKGVyciA9PiB7fSk7XG5cblxuLy8gICB9KTtcblxuLy8gfSk7XG5cblxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBtb3hpb3MgZnJvbSAnbW94aW9zJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgeyB1c2VyTG9naW4gfSBmcm9tICcuLi8uLi9hcGlDYWxscy9jYWxsQXBpJztcbmltcG9ydCB7IHBvc3RDYWxsIH0gZnJvbSAnLi4vLi4vYXBpQ2FsbHMvc2VydmljZXMnO1xuXG5cbi8vamVzdC5tb2NrKCcuLi8uLi9hcGlDYWxscy9zZXJ2aWNlcycpO1xuZGVzY3JpYmUoJ21vY2tpbmcgYXhpb3MgcmVxdWVzdHMnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICBkZXNjcmliZSgnYWNyb3NzIGVudGlyZSBzdWl0ZScsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpdCgnY2FsbHMgYXhpb3MgZ2V0Q2FsbCBhbmQgcmV0dXJucyB1c2VycycsICgpID0+IHtcbiAgICAgICAgICAgIGplc3QudW5tb2NrKCcuLi8uLi9hcGlDYWxscy9zZXJ2aWNlcycpO1xuICAgICAgICAgICAgY29uc3Qgc2VydmljZXMgPSByZXF1aXJlKCcuLi8uLi9hcGlDYWxscy9zZXJ2aWNlcycpO1xuICAgICAgICAgICAgc2VydmljZXMucG9zdENhbGwgPSBzaW5vbi5zdHViKCk7XG4gICAgICAgICAgICBzZXJ2aWNlcy5wb3N0Q2FsbC53aXRoQXJncyhcInVzZXJzL2xvZ2luXCIsIHtlbWFpbDogXCJhYmNkQDEyMy5jb21cIiwgcGFzc3dvcmQ6IFwiYWJjXCJ9KS5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSh7c3RhdHVzOiAnMjAwIE9LJ30pKTtcblxuICAgICAgICAgICAgdXNlckxvZ2luKHtlbWFpbDogXCJhYmNkQDEyMy5jb21cIiwgcGFzc3dvcmQ6IFwiYWJjXCJ9KVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChzZXJ2aWNlcy5wb3N0Q2FsbCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7fSk7XG4gICAgICAgICAgICB9KVxuXG5cbiAgICAgICAgfSlcbiAgICB9KVxuXG5cblxuLy8gZXhwb3J0IGRlZmF1bHQge1xuLy8gICAgIHBvc3Q6IGplc3QuZm4oKHVybCwgZGF0YSkgPT4gUHJvbWlzZS5yZXNvbHZlKHtyZXNwb25zZToge3N0YXR1czogXCIyMDAgT0tcIn19KSlcbi8vIH1cbiJdfQ==