{"version":3,"sources":["callApi.js"],"names":["baseUrl","requestHeader","headers","apiConfig","authenticationToken","userLogin","credentials","Promise","resolve","reject","postCall","then","result","status","console","log","data","token","userId","id","catch","err","response","message","errorConstants","AUTH_FAILED","MESSAGE","code","CODE","getOrderItems","orderId","authenticatedGetCall","updateOrder","updateOps","putCall","getUsersOrders","getMenuItems","url","mydata","callingUrl","axios","post","header","get","put"],"mappings":"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","sourcesContent":["import { apiConfig } from '../apiCalls/config';\nimport axios from 'axios';\nimport { errorConstants } from './errorConstants';\n\nconst baseUrl = \"http://localhost:3001/\";\n\nconst requestHeader = { headers: { \"Authorization\": \"Bearer \" + apiConfig.authenticationToken } }\n\nexport const userLogin = (credentials) => {\n    return new Promise((resolve, reject) => {\n        postCall(\"users/login\", credentials)\n            .then(result => {\n                if (result.status === 200){\n                    console.log(result);\n                    apiConfig.authenticationToken = result.data.token;\n                    apiConfig.userId = result.data.id;\n                    resolve();\n                }\n                \n\n\n            })\n            .catch(err => {\n                console.log(\"rejected\");\n                if (err.response.status === 401){\n                    reject({\n                        message: errorConstants.AUTH_FAILED.MESSAGE,\n                        code: errorConstants.AUTH_FAILED.CODE\n                    });\n                }\n                else if (err.response.status === 500){\n                    reject({\n                        message: errorConstants.AUTH_FAILED.MESSAGE,\n                        code: errorConstants.AUTH_FAILED.CODE\n                    });\n                }\n                \n            });\n    });\n}\n\nexport const getOrderItems = (orderId) => {\n    return new Promise((resolve, reject) => {\n        authenticatedGetCall(\"orders/\"+orderId)\n            .then(result => {\n                resolve(result);\n\n\n            })\n            .catch(err => {reject()});\n    });\n}\n\n\nexport const updateOrder = (orderId, updateOps) => {\n    return new Promise((resolve, reject) => {\n        putCall(\"orders/\" + orderId, updateOps)\n            .then(result => {\n                resolve(result);\n            })\n            .catch(err => {reject()});\n    });\n}\n\n\n// this needs to be changed\nexport const getUsersOrders = () => {\n    return new Promise((resolve, reject) => {\n        console.log(apiConfig.userId);\n        authenticatedGetCall(\"orders/all/\" + apiConfig.userId)\n            .then(result => {\n                resolve(result);\n            })\n            .catch(err => {reject()});\n    });\n}\n\n\nexport const getMenuItems = () => {\n    return new Promise((resolve, reject) => {\n        authenticatedGetCall(\"items/\")\n            .then(result => {\n                resolve(result);\n            })\n            .catch(err => {reject()});\n    });\n}\n\n\n/*\n    POST, GET, PUT calls defined\n */\n\nfunction postCall(url, mydata) {\n    return new Promise((resolve, reject) => {\n        let callingUrl = baseUrl + url;\n        // resolve(axios.post(callingUrl, mydata)\n        //     .then(response => {\n        //         return response;\n        //     }));\n        axios.post(callingUrl, mydata)\n             .then(response => {\n                 if (response.status === 200 || response.status === 201 || response.status === 401) {\n             \n                     resolve(response);\n                 }\n                 else if (response.status === 500){\n                     console.log(\"error calling api post call\");\n                     reject();\n                 }\n                 else {\n                    console.log(\"unexpected error code\");\n                    reject();\n                 }\n             }\n             )\n             .catch(err => {\n                if (err.response.status === 401){\n                    reject(err);\n                }\n             });\n    });\n}\n\n\nfunction authenticatedGetCall(url, header) {\n    const requestHeader = { headers: { \"Authorization\": \"Bearer \" + apiConfig.authenticationToken } };\n\n    return new Promise((resolve, reject) => {\n        let callingUrl = baseUrl + url;\n        resolve(axios.get(callingUrl, requestHeader)\n            .then(response => {\n                return response;\n            }));\n    });\n}\n\n\nfunction putCall(url, updateOps) {\n    return new Promise((resolve, reject) => {\n        let callingUrl = baseUrl + url;\n        resolve(axios.put(callingUrl,updateOps)\n            .then(response => {\n                return response;\n            }));\n    });\n}"]}