85c1930d619616ac5b6090112110f603
"use strict";

var _interopRequireDefault = require("/home/anupamaa/Desktop/Training/pos/server/client/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _axios = _interopRequireDefault(require("axios"));

var _moxios = _interopRequireDefault(require("moxios"));

var _sinon = _interopRequireDefault(require("sinon"));

var _callApi = require("../../apiCalls/callApi");

var _services = require("../../apiCalls/services");

// import { userLogin } from '../../apiCalls/callApi';
// import { error } from '../../apiCalls/errorConstants';
// import HttpStatus from 'http-status-codes';
// import mockAxios from 'axios';
// describe("LoginBox Component", () => {
//   it("calls axios getCall and returns users", async () => {
//     mockAxios.post.mockImplementationOnce(() => Promise.resolve({
//             status: HttpStatus.OK
//     }));
//     const login = userLogin({email: "abcd@123.com", password: "abc"})
//     .then(response => {
//         expect(mockAxios.post).toHaveBeenCalledTimes(0);
//         expect(response.status).toBe(HttpStatus.OK);
//         expect(mockAxios.post).toHaveBeenCalledWith(true);
//     })
//     .catch(err => {});
//   });
// });
describe('mocking axios requests', function () {
  describe('across entire suite', function () {
    it('calls axios getCall and returns users', () => {
      jest.mock('../../apiCalls/services', () => ({
        postCall: jest.fn(() => Promise.resolve({
          status: '200 OK'
        }))
      })); //   describe('Akamai getImages', () => {
      //     it('should make a request when we get images', () => {
      //       getImages();
      //       expect(makeRequest).toHaveBeenCalledWith('/akamai', 'GET');
      //     });
      //   });

      return (0, _callApi.userLogin)({
        email: "abcd@123.com",
        password: "abc"
      }).then(response => {
        expect(_services.postCall).toHaveBeenCalledWith('users/login', {});
      }); // Elsewhere in your code axios.get('/users/search', { params: { q: 'flintstone' } }) is called
    });
  });
}); // export default {
//     post: jest.fn((url, data) => Promise.resolve({response: {status: "200 OK"}}))
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhbGxBcGkudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiamVzdCIsIm1vY2siLCJwb3N0Q2FsbCIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzdGF0dXMiLCJlbWFpbCIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiXSwibWFwcGluZ3MiOiI7Ozs7QUE2QkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBakNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQVdBQSxRQUFRLENBQUMsd0JBQUQsRUFBMkIsWUFBWTtBQUUzQ0EsRUFBQUEsUUFBUSxDQUFDLHFCQUFELEVBQXdCLFlBQVk7QUFFMUNDLElBQUFBLEVBQUUsQ0FBQyx1Q0FBRCxFQUEwQyxNQUFNO0FBQ2hEQyxNQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSx5QkFBVixFQUFxQyxPQUFPO0FBQ3hDQyxRQUFBQSxRQUFRLEVBQUVGLElBQUksQ0FBQ0csRUFBTCxDQUFRLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQjtBQUFFQyxVQUFBQSxNQUFNLEVBQUU7QUFBVixTQUFoQixDQUFkO0FBRDhCLE9BQVAsQ0FBckMsRUFEZ0QsQ0FLaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLGFBQU8sd0JBQVU7QUFBQ0MsUUFBQUEsS0FBSyxFQUFFLGNBQVI7QUFBd0JDLFFBQUFBLFFBQVEsRUFBRTtBQUFsQyxPQUFWLEVBQ05DLElBRE0sQ0FDREMsUUFBUSxJQUFJO0FBQ2RDLFFBQUFBLE1BQU0sQ0FBQ1Qsa0JBQUQsQ0FBTixDQUFpQlUsb0JBQWpCLENBQXNDLGFBQXRDLEVBQXFELEVBQXJEO0FBQ0gsT0FITSxDQUFQLENBWGdELENBZ0JoRDtBQUdELEtBbkJDLENBQUY7QUFvQkQsR0F0Qk8sQ0FBUjtBQXVCSCxDQXpCTyxDQUFSLEMsQ0E0QkE7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgdXNlckxvZ2luIH0gZnJvbSAnLi4vLi4vYXBpQ2FsbHMvY2FsbEFwaSc7XG4vLyBpbXBvcnQgeyBlcnJvciB9IGZyb20gJy4uLy4uL2FwaUNhbGxzL2Vycm9yQ29uc3RhbnRzJztcbi8vIGltcG9ydCBIdHRwU3RhdHVzIGZyb20gJ2h0dHAtc3RhdHVzLWNvZGVzJztcbi8vIGltcG9ydCBtb2NrQXhpb3MgZnJvbSAnYXhpb3MnO1xuXG4vLyBkZXNjcmliZShcIkxvZ2luQm94IENvbXBvbmVudFwiLCAoKSA9PiB7XG5cblxuLy8gICBpdChcImNhbGxzIGF4aW9zIGdldENhbGwgYW5kIHJldHVybnMgdXNlcnNcIiwgYXN5bmMgKCkgPT4ge1xuLy8gICAgIG1vY2tBeGlvcy5wb3N0Lm1vY2tJbXBsZW1lbnRhdGlvbk9uY2UoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgXG4vLyAgICAgICAgICAgICBzdGF0dXM6IEh0dHBTdGF0dXMuT0tcbiAgICAgICAgXG4vLyAgICAgfSkpO1xuXG4vLyAgICAgY29uc3QgbG9naW4gPSB1c2VyTG9naW4oe2VtYWlsOiBcImFiY2RAMTIzLmNvbVwiLCBwYXNzd29yZDogXCJhYmNcIn0pXG4vLyAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuLy8gICAgICAgICBleHBlY3QobW9ja0F4aW9zLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKTtcbi8vICAgICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZShIdHRwU3RhdHVzLk9LKTtcbi8vICAgICAgICAgZXhwZWN0KG1vY2tBeGlvcy5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh0cnVlKTtcbi8vICAgICB9KVxuLy8gICAgIC5jYXRjaChlcnIgPT4ge30pO1xuICAgXG4gICAgXG4vLyAgIH0pO1xuXG4vLyB9KTtcblxuXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IG1veGlvcyBmcm9tICdtb3hpb3MnO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCB7IHVzZXJMb2dpbiB9IGZyb20gJy4uLy4uL2FwaUNhbGxzL2NhbGxBcGknO1xuaW1wb3J0IHsgcG9zdENhbGwgfSBmcm9tICcuLi8uLi9hcGlDYWxscy9zZXJ2aWNlcyc7XG5cblxuXG5kZXNjcmliZSgnbW9ja2luZyBheGlvcyByZXF1ZXN0cycsIGZ1bmN0aW9uICgpIHtcblxuICAgIGRlc2NyaWJlKCdhY3Jvc3MgZW50aXJlIHN1aXRlJywgZnVuY3Rpb24gKCkge1xuICBcbiAgICAgIGl0KCdjYWxscyBheGlvcyBnZXRDYWxsIGFuZCByZXR1cm5zIHVzZXJzJywgKCkgPT4ge1xuICAgICAgICBqZXN0Lm1vY2soJy4uLy4uL2FwaUNhbGxzL3NlcnZpY2VzJywgKCkgPT4gKHtcbiAgICAgICAgICAgIHBvc3RDYWxsOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IHN0YXR1czogJzIwMCBPSycgfSkpXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIFxuICAgICAgICAvLyAgIGRlc2NyaWJlKCdBa2FtYWkgZ2V0SW1hZ2VzJywgKCkgPT4ge1xuICAgICAgICAvLyAgICAgaXQoJ3Nob3VsZCBtYWtlIGEgcmVxdWVzdCB3aGVuIHdlIGdldCBpbWFnZXMnLCAoKSA9PiB7XG4gICAgICAgIC8vICAgICAgIGdldEltYWdlcygpO1xuICAgICAgICAvLyAgICAgICBleHBlY3QobWFrZVJlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYWthbWFpJywgJ0dFVCcpO1xuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vICAgfSk7XG4gICAgICAgIHJldHVybiB1c2VyTG9naW4oe2VtYWlsOiBcImFiY2RAMTIzLmNvbVwiLCBwYXNzd29yZDogXCJhYmNcIn0pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChwb3N0Q2FsbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3VzZXJzL2xvZ2luJywge30pO1xuICAgICAgICB9KVxuICBcbiAgICAgICAgLy8gRWxzZXdoZXJlIGluIHlvdXIgY29kZSBheGlvcy5nZXQoJy91c2Vycy9zZWFyY2gnLCB7IHBhcmFtczogeyBxOiAnZmxpbnRzdG9uZScgfSB9KSBpcyBjYWxsZWRcbiAgXG4gICAgICAgIFxuICAgICAgfSlcbiAgICB9KVxufSkgIFxuXG5cbi8vIGV4cG9ydCBkZWZhdWx0IHtcbi8vICAgICBwb3N0OiBqZXN0LmZuKCh1cmwsIGRhdGEpID0+IFByb21pc2UucmVzb2x2ZSh7cmVzcG9uc2U6IHtzdGF0dXM6IFwiMjAwIE9LXCJ9fSkpXG4vLyB9XG4iXX0=